
#line 3 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 39
#define YY_END_OF_BUFFER 40
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[348] =
    {   0,
        0,    0,   40,   38,   33,   34,   38,   38,   35,   38,
       30,   37,   37,   38,   37,    1,   26,   37,   31,   37,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   38,   38,
       33,   37,    0,    0,   20,    0,    0,   21,    0,    0,
        0,    0,   19,   18,    0,    0,    1,    1,   36,   35,
        1,    0,    0,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   27,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,    0,   32,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    1,    0,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   27,   29,   29,   29,   29,
       29,   27,   27,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   27,   29,   29,   29,
       27,   29,   29,   29,   27,   29,   27,   29,    0,    0,
        0,    0,    0,    0,   22,    0,    0,    0,   11,    0,
        0,    0,    0,    0,    0,    1,   28,   27,   27,   27,
       29,   29,   29,   27,   27,   27,   29,   27,   29,   29,

       29,   27,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,    0,    0,    0,    0,
        0,    0,    0,    0,    3,   24,    0,    0,    0,    0,
       27,   27,   27,   29,   29,   29,   29,   29,   29,    0,
        0,    0,   25,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   29,   29,    0,    0,    0,    0,    0,    6,
        0,    0,    0,    0,    0,    0,    0,    0,   29,    0,
       23,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   29,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    8,   10,    9,    0,    0,    0,

        2,    0,    0,    7,    0,    0,    0,    0,   13,    0,
        0,    0,    0,    0,    0,   12,    0,    0,    0,   17,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   14,    0,    0,    0,    0,    0,    5,   15,
        0,    0,    0,    0,   16,    4,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    1,    1,    5,    6,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   20,   20,   20,   20,   20,   22,   23,   24,
       25,   26,   27,    1,   28,   29,   30,   31,   32,   31,
       31,   33,   34,   31,   31,   35,   36,   31,   31,   37,
       31,   38,   39,   40,   41,   42,   31,   31,   31,   31,
        1,    1,    1,    1,   43,    1,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       68,   31,   69,   70,   71,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[72] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    1,    1,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    1,    1,
        1
    } ;

static const flex_int16_t yy_base[350] =
    {   0,
        0,    0,  679,  680,  676,  680,  652,   44,  680,  669,
      680,  680,   94,   99,   75,  106,  680,  650,  649,  648,
      663,   84,  113,   68,   78,   88,   80,   66,   85,   86,
      119,   92,   89,   93,  139,  127,  144,  146,  600,  600,
      667,  680,  105,  629,  612,  606,  608,  134,  616,   87,
      609,  130,  610,  680,  133,  181,  189,  194,  680,  680,
      199,  215,  231,  652,  124,  186,  180,  177,  101,  164,
      216,  183,  181,  219,  221,  235,  236,  237,  244,  245,
      246,  247,  248,  249,  250,  251,  253,  651,  254,  252,
      255,  257,  256,  147,  260,  258,  262,  261,  263,  265,

      267,  266,  269,  588,  680,  614,  602,  617,  597,  590,
      601,  250,  589,  590,  592,  628,  600,  241,  591,  126,
      317,  322,  327,  339,  292,  273,  304,  305,  300,  271,
      308,  310,  311,  317,  282,  341,  312,  342,  344,  346,
      353,  355,  356,  358,  359,  360,  361,  364,  370,  368,
      372,  371,  373,  374,  375,  376,  377,  379,  378,  381,
      380,  385,  382,  391,  393,  384,  395,  397,  587,  365,
      582,  598,  599,  579,  680,  590,  596,  576,  680,  591,
      576,  587,  576,  586,  432,  438,  680,  415,  416,  424,
      399,  405,  407,  417,  451,  423,  402,  429,  278,  454,

      431,  624,  461,  462,  464,  467,  468,  469,  470,  472,
      473,  474,  476,  475,  479,  477,  569,  587,  582,  575,
      565,  575,  568,  569,  680,  680,  561,  574,  582,  348,
      480,  481,  485,  484,  486,  487,  488,  489,  490,  569,
      559,  560,  680,  566,  573,  569,  567,  574,  471,  561,
      560,  548,  493,  494,  545,  547,  467,  550,  552,  680,
      543,  553,  565,  545,  554,  545,  550,  551,  497,  550,
      680,  539,  552,  538,  551,  545,  536,  552,  528,  533,
      540,  525,  527,  503,  547,  529,  520,  520,  495,  520,
      532,  516,  530,  525,  680,  680,  680,  522,  507,  522,

      680,  515,  510,  680,  523,  513,  534,  544,  680,  506,
      506,  519,  502,  515,  503,  680,  501,  510,  506,  680,
      492,  492,  506,  497,  496,  489,  490,  488,  479,  484,
      492,  476,  680,  469,  471,  463,  470,  457,  680,  680,
      462,  456,  350,  226,  680,  680,  680,  162,  566
    } ;

static const flex_int16_t yy_def[350] =
    {   0,
      347,    1,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  349,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,

      348,  348,  348,  349,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,

      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  348,  348,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  348,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  348,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,

      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,    0,  347,  347
    } ;

static const flex_int16_t yy_nxt[752] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   12,
       12,   12,   12,   13,   14,   15,   16,   16,   16,   16,
       16,   12,   17,   18,   19,   20,   12,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   22,   21,   23,   24,   25,   26,   27,
       28,   29,   30,   21,   31,   32,   33,   21,   34,   21,
       35,   36,   37,   21,   21,   21,   21,   38,   39,   40,
        4,   43,   44,   45,   63,   46,   63,   47,   48,   49,
       50,   51,   52,   53,   54,   59,   63,   43,   63,   45,
       60,   46,   63,   63,   63,   47,   63,   63,   48,   49,

       63,   63,   50,   88,   51,   55,   53,   54,   56,   63,
       57,   57,   57,   57,   57,   58,   58,   58,   58,   58,
       61,   63,   57,   57,   57,   57,   57,   63,   77,   65,
      114,   80,   63,   86,   81,   63,   95,   62,   78,   87,
       85,  115,   82,   83,   79,   66,   67,   63,   84,   94,
       96,  106,   63,   62,   63,   63,   68,   69,   70,  107,
       71,  131,   88,   88,   64,   89,  112,   72,   90,  181,
       73,   74,   63,   91,   75,   76,   92,  117,  100,   93,
      117,  125,   97,  183,  112,   63,  101,  102,   63,   63,
       98,   63,  118,  159,   63,  120,   99,   58,   58,   58,

       58,   58,   88,   61,  103,   57,   57,   57,   57,   57,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       62,  132,  128,  127,   63,  121,  122,   63,  122,   63,
       62,  123,  123,  123,  123,  123,   62,  126,  129,  130,
      135,  121,  136,   63,   63,   63,   62,  124,  124,  124,
      124,  124,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,  133,   63,   63,
       63,   63,  138,   63,   63,   63,  137,   63,  140,   63,
      139,   63,  134,  141,  181,  142,   63,  346,  175,  144,
       63,  147,  182,  151,   88,  155,  150,  145,  183,  148,

       63,  154,  143,  160,  146,  149,  157,  158,   63,  152,
      153,  175,   63,   63,  193,  156,   63,  163,   63,   63,
       63,  165,  167,  161,  162,   63,  164,  166,  185,  189,
      185,  195,  168,  186,  186,  186,  186,  186,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  187,   63,
       63,  192,   63,  188,   63,  124,  124,  124,  124,  124,
      190,   63,  191,   63,   63,   88,   63,   63,   63,   63,
       88,  194,   63,  199,   88,   88,   63,   88,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   88,   63,   63,  209,   88,  251,  212,  196,   63,

       88,   63,  198,   63,  197,   63,  218,   63,   88,  252,
       63,  200,  345,   63,   88,   63,   88,  201,  204,   88,
       88,   88,   88,   63,   63,   63,   88,  202,  205,  218,
      207,   63,   63,  208,  203,  210,  213,   63,  215,   63,
      206,  211,   88,   88,   88,   88,   88,  214,  186,  186,
      186,  186,  186,  216,  186,  186,  186,  186,  186,   63,
      231,  232,   63,  233,   88,   88,   88,   88,  234,   63,
       63,   88,   63,   88,   88,   63,   63,   63,   63,   88,
       63,   63,   63,   63,   63,   63,   88,   63,   63,   63,
       88,   88,   63,   63,   63,   63,   63,   63,   63,  263,

       88,   63,   63,  272,  273,   63,   88,   88,  264,  265,
       88,   63,  344,  343,  342,  341,  340,  237,  339,   88,
      338,   88,   88,  235,  302,   88,   88,  337,   88,   88,
       88,   88,  236,  238,   88,   88,  239,  336,  335,   88,
      302,  334,  333,  253,  332,  269,  331,  330,  329,  328,
      327,   88,  326,  284,  325,  254,  324,  323,  322,  321,
      320,  319,  318,  317,  316,   88,  104,  315,  104,  314,
      313,  312,  311,  310,  309,  308,  307,  306,  305,  304,
      303,  301,  300,  299,  298,  297,  296,  295,  294,  293,
      292,  291,  290,  289,  288,  287,  286,  285,  283,  282,

      281,  280,  279,  278,  277,  276,  275,  274,  271,  270,
      268,  267,  266,  262,  261,  260,  259,  258,  257,  256,
      255,  250,  249,  248,  247,  246,  245,  244,  243,  242,
      241,  240,   63,  230,  229,  228,  227,  226,  225,  224,
      223,  222,  221,  220,  219,  217,  184,  180,  179,  178,
      177,  176,  174,  173,  172,  171,  170,  169,  105,   63,
       63,  119,  116,  113,  111,  110,  109,  108,   41,   42,
      105,   63,   42,   42,   42,   42,   42,   41,  347,    3,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,

      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347
    } ;

static const flex_int16_t yy_chk[752] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    8,    8,    8,   28,    8,   24,    8,    8,    8,
        8,    8,    8,    8,    8,   15,   25,    8,   27,    8,
       15,    8,   22,   29,   30,    8,   26,   33,    8,    8,

       32,   34,    8,   30,    8,    8,    8,    8,   13,   69,
       13,   13,   13,   13,   13,   14,   14,   14,   14,   14,
       16,   23,   16,   16,   16,   16,   16,   31,   24,   22,
       50,   26,   65,   28,   26,   36,   33,   16,   25,   29,
       27,   50,   26,   26,   25,   22,   22,   35,   26,   32,
       34,   43,   37,   16,   38,   94,   23,   23,   23,   43,
       23,   69,   38,   38,  348,   31,   48,   23,   31,  120,
       23,   23,   70,   31,   23,   23,   31,   52,   36,   31,
       55,   65,   35,  120,   48,   68,   36,   37,   67,   73,
       35,   72,   52,   94,   66,   55,   35,   56,   56,   56,

       56,   56,   38,   57,   37,   57,   57,   57,   57,   57,
       58,   58,   58,   58,   58,   61,   61,   61,   61,   61,
       57,   70,   68,   67,   71,   58,   62,   74,   62,   75,
       61,   62,   62,   62,   62,   62,   57,   66,   68,   68,
       72,   58,   73,   76,   77,   78,   61,   63,   63,   63,
       63,   63,   79,   80,   81,   82,   83,   84,   85,   86,
       90,   87,   89,   91,   93,   92,   96,   71,   95,   98,
       97,   99,   75,  100,  102,  101,   74,  103,   76,  130,
       75,  126,   71,   77,  118,   78,  199,  344,  112,   80,
      135,   83,  118,   85,  199,   90,   84,   81,  118,   83,

      125,   89,   79,   95,   82,   83,   92,   93,  129,   86,
       87,  112,  127,  128,  130,   91,  131,   98,  132,  133,
      137,  100,  102,   96,   97,  134,   99,  101,  121,  126,
      121,  135,  103,  121,  121,  121,  121,  121,  122,  122,
      122,  122,  122,  123,  123,  123,  123,  123,  124,  136,
      138,  129,  139,  125,  140,  124,  124,  124,  124,  124,
      127,  141,  128,  142,  143,  133,  144,  145,  146,  147,
      131,  132,  148,  143,  143,  134,  150,  137,  149,  152,
      151,  153,  154,  155,  156,  157,  159,  158,  161,  160,
      163,  136,  166,  162,  157,  157,  230,  161,  138,  164,

      142,  165,  140,  167,  139,  168,  170,  191,  141,  230,
      197,  143,  343,  192,  145,  193,  149,  146,  151,  144,
      148,  157,  153,  188,  189,  194,  159,  147,  152,  170,
      155,  196,  190,  156,  150,  158,  162,  198,  165,  201,
      154,  160,  190,  165,  163,  167,  166,  164,  185,  185,
      185,  185,  185,  168,  186,  186,  186,  186,  186,  195,
      191,  192,  200,  193,  197,  188,  189,  194,  195,  203,
      204,  200,  205,  196,  190,  206,  207,  208,  209,  198,
      210,  211,  212,  214,  213,  216,  209,  215,  231,  232,
      212,  201,  234,  233,  235,  236,  237,  238,  239,  249,

      234,  253,  254,  257,  257,  269,  238,  238,  249,  249,
      204,  284,  342,  341,  338,  337,  336,  211,  335,  203,
      334,  214,  216,  207,  289,  206,  205,  332,  209,  235,
      231,  232,  208,  213,  210,  233,  215,  331,  330,  253,
      289,  329,  328,  236,  327,  254,  326,  325,  324,  323,
      322,  239,  321,  269,  319,  237,  318,  317,  315,  314,
      313,  312,  311,  310,  308,  284,  349,  307,  349,  306,
      305,  303,  302,  300,  299,  298,  294,  293,  292,  291,
      290,  288,  287,  286,  285,  283,  282,  281,  280,  279,
      278,  277,  276,  275,  274,  273,  272,  270,  268,  267,

      266,  265,  264,  263,  262,  261,  259,  258,  256,  255,
      252,  251,  250,  248,  247,  246,  245,  244,  242,  241,
      240,  229,  228,  227,  224,  223,  222,  221,  220,  219,
      218,  217,  202,  184,  183,  182,  181,  180,  178,  177,
      176,  174,  173,  172,  171,  169,  119,  117,  116,  115,
      114,  113,  111,  110,  109,  108,  107,  106,  104,   88,
       64,   53,   51,   49,   47,   46,   45,   44,   41,   40,
       39,   21,   20,   19,   18,   10,    7,    5,    3,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,

      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "f0.l"
/* Program for Flex++ to manage lexical analisis
   Programmer: Jose L. Segovia-Juarez
   2002-2022  */
#line 6 "f0.l"
//#include <FlexLexer.h>
#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <fstream>
#include "f0.h"
#include "st.h"
using namespace std;
dataxy t;

//int yywrap();
int insert_st(st_struct st[], char * yytext);
int look_st(st_struct st[], char * yytext);
int insert_st(st_struct st[], string yytext);
int look_st(st_struct st[], string yytext);

void error(const char * error, int tok);
void error(std::string, int linen);
void error(string ab, int linen);
void error(string ab);

void warning(string ab);
st_struct st[MAXTS];   // store for variables/constants
st_mycode mc[MAXTS];   // array to store the lines of code
int levelvar[MAXTS];   // array of indexes to replace variables in diff eqn
int mylineno=1;
int lastid=1;
int nconstants=0;
int codelineno=0;
long double lastnumber;
int nomore = 0;
char myeq0[MAXLINE];
string myvar1;
int myreturn;

// FOR FIGURES
int nfigs =0;
int tfigs[MAXTS];
int LHSDecl[MAX_LHS_MATRIX];
// int nlhs=0;
#line 725 "lex.yy.cc"
#line 726 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 58 "f0.l"


#line 861 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 348 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 680 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 60 "f0.l"
{
                    lastnumber = atof(yytext);
                    return NUMBER;  }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 64 "f0.l"
{ return EQUATIONS; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 65 "f0.l"
{ return PLOT; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 66 "f0.l"
{ return INITIAL_CONDITIONS; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 67 "f0.l"
{ return PARAMETERS_FILE; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 68 "f0.l"
{ return METHOD;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 69 "f0.l"
{ return FROM_T; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 70 "f0.l"
{ return TO_T; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 71 "f0.l"
{ return TIMESTEP; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 72 "f0.l"
{ return TIMEFIGS; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 73 "f0.l"
{ return RungeKutta4th; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 74 "f0.l"
{ return CashKarpRungeKutta;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 75 "f0.l"
{ return BSStepPoly; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 76 "f0.l"
{ return BSStepRational; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 77 "f0.l"
{ return StiffRosenbrock; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 78 "f0.l"
{ return StiffSemiImplicit; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 79 "f0.l"
{ return StiffBSStep; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 80 "f0.l"
{ return UNIFORM; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 81 "f0.l"
{ return TRIANGULAR; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 82 "f0.l"
{ return CINTERVALTYPE; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 83 "f0.l"
{ return LOGTYPE; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 84 "f0.l"
{ return LHSRUN; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 85 "f0.l"
{ return ALLVARS; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 86 "f0.l"
{ return SEED;  }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 87 "f0.l"
{ return CLOCK; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 88 "f0.l"
{ return SEMI_COLON; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 90 "f0.l"
{ return FUNCTION; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 92 "f0.l"
{
  int pos1;
  myvar1 = yytext;
  pos1 = myvar1.find('(',0);
  if (pos1 == 0) error("should be parleft at line",mylineno);
  myvar1.replace(pos1,1,"_");
  pos1 = myvar1.find(')',0);
  if (pos1 == 0) error("should be parclose at line",mylineno);
  myvar1.replace(pos1,1,"_");
  if (nomore==1) lastid = look_st(st,myvar1);
  else
    {
      lastid = insert_st(st, myvar1);
      st[lastid].type = IDENTIFIER;
    }
  return IDENTIFIER;
  }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 110 "f0.l"
{
  if (nomore==1) lastid = look_st(st,yytext);
  else
    {
      lastid = insert_st(st, yytext);
      st[lastid].type = IDENTIFIER;
    }
  return IDENTIFIER;
   }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 120 "f0.l"
{ return APOSTROPHE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 122 "f0.l"
{  return ASSIGNMENT ; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 124 "f0.l"
/* eat up one-line comments */
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 126 "f0.l"
/* eat up whitespace */
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 128 "f0.l"
mylineno++;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 130 "f0.l"
{  int c;
                   while ( (c = yyinput() ) != 0)
                   {  if (c == '\n')
                     { ++mylineno;
                       break;
                      }
                }
          /*  printf("Line %d comment", mylineno);  */
        }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 140 "f0.l"
{
                   int c;
                   while((c = yyinput()) != 0)
                       {
                       if(c == '\n')
                           ++mylineno;
                       else if(c == '*')
                           {
                           if((c = yyinput()) == '/')
                               break;
                           else
                               unput(c);
                           }
                       }
                   }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 156 "f0.l"
{ return OPERATOR; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 158 "f0.l"
{ printf( "Line %d:  Unrecognized character: %s\n", mylineno, yytext );
 return(yytext[0]);  error("Unrecognized character in line ", mylineno);
exit(1); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 162 "f0.l"
ECHO;
	YY_BREAK
#line 1164 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 348 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 348 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 347);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 162 "f0.l"

// using namespace std;

//int yywrap()  { return 1; }

void init_st(st_struct st[])
{
  int i=1;
  for (i=0; i<MAXTS; i++)
	 {
      st[i].name = "";
      st[i].dfequation = "";
      st[i].constequation = "";
      st[i].eqname = "";
      st[i].constname = "";
      st[i].object = MAX_KEY_TS;      // number of entries on the table
      st[i].type = 0;
      st[i].var_type = 0;
      st[i].p_diffeq = 0;
      st[i].initialized = 0;
      st[i].declaration = 0;
      st[i].declared_here=0;
      st[i].begin_range = 0;
      st[i].mid_range  = 0;
      st[i].end_range = 0;
      st[i].type_range = "";
      st[i].lhsrun = 0;
      levelvar[i] = 0;
    }
    st[0].name = "TimeAct";
    st[0].constname = "TimeAct";
    st[0].eqname = "TimeAct";
}

int look_st(st_struct st[], string yytext)
{ int i, foundhere;
   string a;
   foundhere=0;
   a = yytext;
   for (i=0; i<=t.lastid; i++)
	 {
	     if (a == st[i].name)
                  {
		     return i;
		  }
	 }
   return 0;
}

int look_st(st_struct st[], char * yytext)
{ int i, foundhere;
   string a;
   foundhere=0;
   a = yytext;
   for (i=0; i<=t.lastid; i++)
	 {
	     if (a == st[i].name)
                  {
		     return i;
		  }
	 }
   return 0;
}

int insert_st(st_struct st[], string  yytext)
{
   int i, foundhere;
   string a;
   foundhere=0;
   a = yytext;
   foundhere = look_st(st, yytext);
   if (foundhere == 0)
	{
	  if (t.lastid >= MAXTS) error("Symbol table too small, please increase the constant MAXTS, error found at ",mylineno);
	  t.lastid++;
	  st[t.lastid].name = a;
	  st[t.lastid].declared_here = foundhere;
	  //  cout << "A Inserting " << a << endl ;
	  return t.lastid;
   }
   else { return foundhere;  }
}

int insert_st(st_struct st[], char * yytext)
{
   int i, foundhere;
   string a;
   foundhere=0;
   a = yytext;
   foundhere = look_st(st, yytext);
   if (foundhere == 0)
     {
       if (t.lastid >= MAXTS) error("Symbol table too small, please increase the constant MAXTS, error found at ",mylineno);
       t.lastid++;
       st[t.lastid].name = a;
       st[t.lastid].declared_here = foundhere;
       // cout << "B Inserting " << a << endl ;
       return t.lastid;
     }
   else { return foundhere;  }
}

void error(const char * ab, int tok)
{
  printf("Error: %s %d \n", ab, tok);
  exit(1); }

void error(string ab, int linen)
{ cout << "Error: " << ab  << " " << linen << endl;
 exit(1); }

void error(string ab)
{ cout << "Error: " << ab  << endl;
 exit(1); }

void warning(string ab)
{ cout << "Warning: " << ab  << endl; }


#include "lhs.c"

int main( int argc, const char * * argv )
{
    ++argv, --argc;  /* skip over program name */
    FlexLexer* lexer = new yyFlexLexer;

	 //	if ( argc > 0 )
	 //		  yyin = fopen( argv[0], "r" );
	 //else
	 //	  yyin = stdin;
    cout << "Creating temp1.c " << endl;
    int token;
	 int mymethod=0;
    float neq;
    t.lastid=0;
    char myeq[MAXLINE];
    string buf;
    string myequation1;
    ostringstream out(buf);
    init_st(st);
    int i, pointerid;
    // checking if all equations' have initial conditions.
    // build variables list
    string list_var;
    int ninitial_conditions = 0;
	 // while here !
    token = lexer->yylex();
    nomore = 0;
    if (token == INITIAL_CONDITIONS)
      {
	token = lexer->yylex();
	if (token!= IDENTIFIER)
	  error("Expecting an variable in line ", mylineno);
	while (token == IDENTIFIER)
	  {
	    myequation1="";
	    pointerid = lastid;
	    token = lexer->yylex();
	    if (token != ASSIGNMENT) error("Expecting  =  in line ", mylineno);
	    token = lexer->yylex();
	    while ((token == IDENTIFIER) || (token == OPERATOR) || (token == NUMBER)|| (token == FUNCTION) || (token == UNIFORM) || (token == TRIANGULAR)   || (token == CINTERVALTYPE)  || (token == LOGTYPE) )
	      {  if (token == IDENTIFIER)
		{
		  myequation1 = myequation1+st[lastid].name+" ";
		}
	      else
		myequation1 = myequation1+lexer->YYText()+" ";
	      token = lexer->yylex();
	      }
	    if (token != SEMI_COLON) error("Expecting ; in line ", mylineno);
	    st[pointerid].constequation = myequation1;
	    st[pointerid].initialized = 1;
	    ostringstream out(buf);
	    out << pointerid;
	    st[pointerid].constname = "C["+ out.str()+"]";
	    //	cout << pointerid << " : " << st[pointerid].name << ", " << st[pointerid].constname << " " << st[pointerid].constequation << endl;
	    if (st[pointerid].var_type == 0)
	      st[pointerid].var_type = CONST;
	    ninitial_conditions++;
	    mc[codelineno].variable = pointerid;
	    mc[codelineno].linecode = myequation1;
	    codelineno++;
	    token = lexer->yylex();
	  }
      }
    int nequations = 0;
    if (token == EQUATIONS)
      {
	token = lexer->yylex();
	i = 0;
	while (token == IDENTIFIER)
	  {
	    nequations++;
	    pointerid = lastid;
	    myequation1="";
	    token =lexer->yylex();
	    if (token == APOSTROPHE) // Level equation
	      {
		st[pointerid].var_type = LEVEL;
		token = lexer->yylex();
		if (token != ASSIGNMENT)
		  error("Expecting = in line", mylineno);
		token = lexer->yylex();
		//   cout << token << endl;
		while ((token == IDENTIFIER) || (token == OPERATOR) || (token == NUMBER) || (token == FUNCTION))
		  {
		    if (token == IDENTIFIER)
		      myequation1 = myequation1+st[lastid].name+"";
		    else
		      myequation1 = myequation1+lexer->YYText()+"";
		    token = lexer->yylex();
		  }
		if (token != SEMI_COLON) error("Expecting ; in line ", mylineno);
		st[pointerid].dfequation = myequation1;
		if (st[pointerid].eqname == "")
		  {
		    ostringstream out(buf);
		    out <<  nequations;
		    st[pointerid].eqname = "y["+out.str()+"]";
		  }
		else error("You are modifing a derivative equation at line ", mylineno);
	      }
	    else
	      {
		if (token != ASSIGNMENT)
		  error(" Expecting = in line ", mylineno);
		token = lexer->yylex();
		while ((token == IDENTIFIER) || (token == OPERATOR) || (token == NUMBER) || (token == FUNCTION))
		  {
		    if (token == IDENTIFIER)
		      myequation1 = myequation1+st[lastid].name+"";
		    else
		      myequation1 = myequation1+lexer->YYText()+"";
		    token = lexer->yylex();
		  }
		if (token != SEMI_COLON) error(" expecting ; in line ", mylineno);
		st[pointerid].dfequation = myequation1;
		ostringstream out(buf);
		out <<  nequations;
		if (st[pointerid].eqname == "")
		  {
		    st[pointerid].var_type = AUX;
		    st[pointerid].eqname = "AUX["+out.str()+"]";
		  }
		else
		  error("You are modifing an auxiliar equation at line  ", mylineno);
	      }
	    st[pointerid].declaration = 1;
	    mc[codelineno].variable = pointerid;
	    mc[codelineno].linecode = st[pointerid].dfequation;
	    codelineno++;
	    levelvar[nequations] = pointerid;
	    st[pointerid].p_diffeq = nequations;
	    token = lexer->yylex();
	    i++;
	  }
      }
    // check simulation parameters
    double xfromt=1.0, xtot=1.0, xtimestep=1.0, xtimefigs = 1.0;
    if (token == FROM_T)
      {
	token = lexer->yylex();
	if (token != NUMBER) error("Expecting a number at line", mylineno);
	xfromt = lastnumber;
	token = lexer->yylex();
      }
    if (token == TO_T)
      {
	token = lexer-> yylex();
	if (token != NUMBER) error("Expecting a number in to-t ");
	xtot = lastnumber;
	token = lexer->yylex();
      }
    if (xtot < xfromt) error(" error in time interval, fromt should be more than tot ", mylineno);
    if (token == TIMESTEP)
      {
	token = lexer->yylex();
	if (token != NUMBER) error("Expecting a timestep ");
	xtimestep = lastnumber;
	if (xtimestep <= 0.000000001) error ("Timestep too small :", mylineno);
	token = lexer->yylex();
      }
    if (token == TIMEFIGS)
      {
	token = lexer->yylex();
	if (token != NUMBER) error("Expecting a time for figures ");
	xtimefigs = lastnumber;
	if (xtimefigs <= 0.0000001) error("number too small to plot intervals: ", mylineno);
	token = lexer->yylex();
      }
    nomore = 1;
    if (token == PLOT)  // syntax: $display variable ... ;
      {  // time is the first implicit variable
	//  cout << " Plot" << endl;
	tfigs[0] = 0;
	token = lexer->yylex();
	// cout << "Token =" << token << endl;
	while(token == IDENTIFIER)
	  {
	    nfigs++;
	    if (lastid == 0) error("at $Plot: undeclared variable in line ", mylineno);
	    tfigs[nfigs] = lastid;
	    token = lexer->yylex();
	    //cout  << st[nfigs].name <<  " ";
	  }
	if (token != SEMI_COLON) error("at $Plot: Expecting an identifier or ; in line",mylineno);
      }
    token = lexer->yylex();
    // check method
    if (token == METHOD)
      {
	token = lexer->yylex();
	if (token == RungeKutta4th)
	  mymethod = RungeKutta4th;
	else
	  if (token ==  CashKarpRungeKutta)
	    mymethod = CashKarpRungeKutta;
	  else
	    if (token ==  BSStepPoly)
	      mymethod =  BSStepPoly;
	    else
	      if (token == BSStepRational)
			  mymethod = BSStepRational;
	      else
			  if (token == StiffRosenbrock)
				 mymethod =   StiffRosenbrock;
			  else
				 if (token == StiffSemiImplicit)
					mymethod = StiffSemiImplicit;
				 else
					if (token == StiffBSStep)
					  mymethod = StiffBSStep;
					else
					  error("Unknown method at line", mylineno);
      }
    if (ninitial_conditions == 0) error("Please add $Initial_conditions.  ", mylineno);
    if (nequations == 0) error("Please add $equations at line ", mylineno);
    if (mymethod == 0) error("Please include a method ($Rk4, $AdaptiveRk4, $BSStepPoly, or $BSStepRational) ", mylineno);
      // print LHS data into a File
    token = lexer->yylex();
    // random number
    int loc=0; int ii;
    long myneg = 0;
    int lhscounter = 0; int n_sample_lhs =0;
    if (token == LHSRUN)
      {
	//tfigs[0] = 0;
	token = lexer->yylex();
	if (token != NUMBER) error("at $LHS, please input a number (number of samples) at line ", mylineno);
	n_sample_lhs = (int)floor(lastnumber);
	if (n_sample_lhs <= 0) error ("at $LHS Number should be a postive number at line", mylineno);
	if (n_sample_lhs > MAX_LHS_MATRIX) error("at $LHS Number too larger for number of samples/simulations at line",mylineno);
	token = lexer->yylex();
	if (token != IDENTIFIER) error("$LHS, Expecting a parameter defined with a range in line ", mylineno);
	while(token == IDENTIFIER)
	  {
	    if (lastid == 0) error("at $LHS, undeclared variable in line ", mylineno);
	    lhscounter++;
	    //if (lhscounter >=  MAX_LHS_MATRIX) error ("too many $lhs variables ");
	    LHSDecl[lhscounter] = lastid;
	    st[lastid].lhsrun=lhscounter;
            //cout << st[lastid].name << "\t" << st[lastid]. endl;
 //  << st[lastid].begin_range << "\t" << st[lastid].mid_range << " \t" << st[lastid].end_range << "\t" << st[lastid].type_range << endl;
	    token = lexer->yylex();
	  }
	if (token != SEMI_COLON) error("at $LHS, expecting an identifier or ; in line",mylineno);
	token = lexer->yylex();
      }
    if (token == SEED)
      {
	token = lexer->yylex();
	if (token == NUMBER)
	  {
	    myneg = -(int)floor(lastnumber);
	    long *midum = (&myneg);
	    //cout << "Seed = " << myneg << endl;
	  }
	else
	  if (token == CLOCK)
	    {
	      myneg = -time(0);
	      long *midum = &myneg;
	      //cout << "Seed Clock= " << myneg << endl;

	    }
	  else error("Seed: should be a number or $clock ");
	token = lexer->yylex();
      }
    else
      if (token > 0)
	error("Unknown command at line ", mylineno);
    if ((myneg >=0) && (lhscounter > 0)) error("Please include a positive seed number or $seed command ");




    double LHSMatrix[lhscounter+1][MAX_LHS_MATRIX];

    // If OK then read the file and continue using flex
    // here to replace the variables
    // reset
    // build arrays for va

    nomore =1; // no more insertions in symbol table
    int j;
    // create the file temp1.c where the output of the code is:
    //
    ofstream temp1("temp1.c");
    temp1 << "/*  Program generated by teval1, a translator and LHS/PRCC evaluator written by Jose L. Segovia,  2002-03, for the Kirschner Lab.  */ " << endl;
    temp1 << "#include <stdio.h> " << endl;
    temp1 << "#include <stdlib.h> " << endl;
    temp1 << "#include <math.h>  " << endl;
    temp1 << "#include <time.h>  " << endl;
    temp1 << "#include <string.h> " << endl;
    temp1 << "#include " << (char)34 << "datatype.h" << (char)34 << endl;
    temp1 << "#define NRANSI " << endl;
      temp1 << "#include "<<(char)34 << "my_nr.h" << (char)34 << endl;
      temp1 << "#include "<<(char)34 << "nrutil.h" << (char)34 << endl;
      temp1 << "double dxsav,*xp,**py;  /* defining declarations */ " << endl;
      temp1 << "int kmax,kount; " << endl;
      temp1 << "int nrhs;   /* counts function evaluations */ "<< endl;

    temp1 << "#define NINC " << ninitial_conditions+2 << endl;
    temp1 << "#define N " << nequations+2 << endl;
    temp1 << "#define NFigs " << nfigs+2 << endl;
    temp1 << "\t int myreturnsyscall = 0;" << endl;
    temp1 << endl;

 temp1 << "void derivs(double TimeAct, double y[], double dydx[], double C[], double AUX[]) " << endl;
 temp1 << "{" << endl;
 temp1 << "	nrhs++; " << endl;
 for (i=ninitial_conditions; i< codelineno; i++)
    {
      if (st[mc[i].variable].var_type == LEVEL)
	temp1 << "\t" <<  "dydx[" << st[mc[i].variable].p_diffeq << "]=  ";
      else
	temp1 << "\t" << st[mc[i].variable].eqname << "=  ";
      //  cout << i << ": " << mc[i].linecode << endl;
      istringstream StringFlow(mc[i].linecode);
      token = lexer->yylex(&StringFlow, &cout);
      while(token != 0)
	{
	  if ((token == IDENTIFIER))
	    {
	      if (st[lastid].eqname != "")
		temp1 << "" << st[lastid].eqname;
	      else
	       if (st[lastid].constname != "")
	          temp1 << "" <<  st[lastid].constname;
	       else
	          {
		   temp1 << "   ---ERROR IN SOURCE FILE!--- " << endl;
		  temp1.close();
		  error("The variable =>" + st[lastid].name + "<= was not declared! ");
//	          temp1 << " UNDECLARED_VARIABLE_HERE_PLEASE_CHECK_YOUR_SOURCE_FILE ";
		  }
	    }
	  else
	    {
	      temp1 << ""  << lexer->YYText();
	    }
	  token = lexer->yylex();
	}
      temp1 << ";  ";
      temp1 << "\t\t /* " << st[mc[i].variable].name << "=" << mc[i].linecode << "; */" << endl;
	 }
	temp1 << "}" << endl;
	temp1 << "void load_constants(double C[]) {  " << endl;
	temp1 << "\t /* Filling initial conditions */ " << endl;
	int printthis = 0;
	int flagids = 0;
	int my_lastid = 0; // For the constant identifier
	for (i=0; i< codelineno; i++)
	  {
	    if (i < ninitial_conditions)
	      {
	 // temp1 << "/* " << i << " */ " ;
         printthis = 0;
	 temp1 << "\t " << st[mc[i].variable].constname << " =  ";
	// cout << mc[i].linecode <<  " || " << endl;
	 istringstream StringFlow(mc[i].linecode);
	 token = lexer->yylex(&StringFlow, &cout);
	 flagids = 0; // to check just for one token to be assigned to the variable.
	 if  ((token == IDENTIFIER) && (st[lastid].var_type == CONST))
	   temp1 << st[my_lastid].constname << " ";
	 else
	   temp1 << lexer->YYText() << " ";
	 token = lexer->yylex();
	// cout << token << endl;
	 if (token != 0)
	   {
	     if (token == NUMBER)
	       st[mc[i].variable].begin_range = lastnumber;
	     else error("Expecting a number as initial range value of variable: "+st[mc[i].variable].name);
	     token = lexer->yylex();
	     if (token == NUMBER)
	       st[mc[i].variable].end_range = lastnumber;
	     else error("Expecting a number as a range value of variable: "+st[mc[i].variable].name);
	     token = lexer->yylex();
	     if (token == NUMBER)
	       {
		 st[mc[i].variable].mid_range = st[mc[i].variable].end_range;
		 st[mc[i].variable].end_range = lastnumber;
	       }
	     else error("Expecting a number as end range value of variable: "+st[mc[i].variable].name);
	     token = lexer->yylex();
	     // cout << token << endl;
	     if (token == TRIANGULAR)
	       st[mc[i].variable].type_range = "T";
	     else if (token == UNIFORM)
	       st[mc[i].variable].type_range = "U";
	     else if (token == CINTERVALTYPE )
	       st[mc[i].variable].type_range = "C";
	     else if (token == LOGTYPE )
	       st[mc[i].variable].type_range = "L";
	     else
	       error("Unknown range type, should be $U, $T, $C, or $L, at variable :"+st[mc[i].variable].name);
	     if (st[mc[i].variable].begin_range > st[mc[i].variable].end_range)
	       error("Initial range value larger than end range of "+st[mc[i].variable].name);
	     if (st[mc[i].variable].begin_range > st[mc[i].variable].mid_range)
	       error("Initial range value larger than midvalue  of "+st[mc[i].variable].name);
	     if (st[mc[i].variable].mid_range > st[mc[i].variable].end_range)
	       error("Middle range  value larger than end range of "+st[mc[i].variable].name);
	   }
	  // 	cout << i << " : " ;

	//  cout << st[mc[i].variable].name << "  B=" << st[mc[i].variable].begin_range << " M=" << st[mc[i].variable].mid_range << " E=" << st[mc[i].variable].end_range << ", " << st[mc[i].variable].type_range << endl;
	 temp1 << "; ";
	 temp1 << "\t\t /* " << st[mc[i].variable].name << "=" << mc[i].linecode << "; */" <<   endl;
       }
   }
  temp1 << "\t } " << endl;
  temp1 << "/* End of loading constants */ " << endl;

  // Filling auxiliary variables
  // Filling level variables with initial conditions

  temp1 << "void load_auxlevel(double AUX[], double y[], double C[]) {" << endl;
  temp1 << "\t /* Filling leval and aux variables with initial conditions */ " << endl;
  for (i=0; i< codelineno; i++)
    {
      if (i >= ninitial_conditions)
       {
	 if  (st[mc[i].variable].constname > "")
	   temp1 << "\t " << st[mc[i].variable].eqname << " =  " << st[mc[i].variable].constname << "; \t /* " << st[mc[i].variable].name << " = */ " << endl;
	 else
	   if (st[mc[i].variable].var_type == LEVEL)
	     {
	       temp1 << "  ---ERROR IN SOURCE FILE!--- " << endl;
	       temp1.close();
	       error("The variable =>"+ st[mc[i].variable].name +"<= should be initialized.");
	     }
	   else
	     temp1 << "\t " << st[mc[i].variable].eqname << " =  0.0; \t /* " << st[mc[i].variable].name << " = */ " << endl;
       }
    }
  temp1 << "} " << endl;
  temp1 << "\n"  << endl;


  // Here code for lhs evaluation
  // checking if variables have been initalized
  int NumSim = n_sample_lhs;
  for (i=1; i<codelineno; i++)
       if ((st[i].lhsrun >= 1)&&(st[i].type_range == ""))
	 {
	   error("The range of variable: "+st[i].name + " was not initialized.");
	 }
       else
	 if (st[i].lhsrun >= 1)
	   {
	     int mypointer = st[i].lhsrun;
	     double temp;
	     FillHypercube(i, LHSMatrix, st, NumSim);
	     if (lhscounter >= 2)
	     for(ii=0; ii<NumSim; ii++)
	       {
		 loc = rand_int(ii, NumSim-1, &myneg);
		 //cout << LHSMatrix[mypointer][ii] << " == " <<  LHSMatrix[mypointer][loc] << " -> " ;
		 temp = LHSMatrix[mypointer][ii];
		 LHSMatrix[mypointer][ii] =  LHSMatrix[mypointer][loc];
		 LHSMatrix[mypointer][loc] = temp;
		 //cout << LHSMatrix[mypointer][ii] << " == " <<  LHSMatrix[mypointer][loc] << " -> " ;
		 //cout << " Swapping i, ii " << mypointer << ", " << ii <<  ", " << loc << "\t";
	       }
	     //	  cout << endl;
	     /* if (element==LabelPar) PrintLabelSample(element); */
	   }

  // print LHS matrix into a File
  ofstream mylhs("lhsmatrix");
  mylhs <<lhscounter << "\t" << NumSim << "\t" << nfigs << "\t" << (int)(xtot/xtimefigs)+1 << endl;  // nfigs
  for (i=1; i<=lhscounter; i++)
    {
      for (ii=0; ii<NumSim ; ii++)
	mylhs << LHSMatrix[i][ii] << " ";
      mylhs << endl;

    }
   mylhs.close();
  // filling outcome/figs variables
  ofstream lhsoutcome("lhsoutcome");
  lhsoutcome << nfigs << endl;
  for (i=1; i<=nfigs; i++)
	 lhsoutcome << st[tfigs[i]].name << endl;
  lhsoutcome.close();

  temp1 << "void update_variables_lhs(int c, double C[]) { " << endl;
  temp1 << "\t /* Updates the following variables at point given by c */ " << endl;
  temp1 << "\t " << endl;
  int uptoNUMSIM;
  for (uptoNUMSIM = 0; uptoNUMSIM<NumSim; uptoNUMSIM++)
    {
      temp1 << "\t if (c == " << uptoNUMSIM << ")   { " << endl;
      for (i=1; i<codelineno; i++)
	if (st[i].lhsrun >= 1)
	  {
	    int mypointer = st[i].lhsrun;
	    temp1 << " \t\t " << st[i].constname <<  " = " << LHSMatrix[mypointer][uptoNUMSIM] << "; " << endl;
	  }
      temp1 << "\t } " << endl;
      //      temp1 << "\t " << i << ", " << st[i].lhsrun << ", ";
      //      for (int jj=0; jj<NumSim; jj++)
      //	temp1 << LHSMatrix[mypointer][jj] << " ";
      //      temp1 << endl;
    }
  temp1 << " } /*  End of update_variables_lhs  */ " << endl;
  temp1 << endl << endl;

  myreturn = system("rm -f 0*");    if (myreturn != 0) { cout << "Error calling rm -f 0*";   }
  myreturn = system("rm -f 0*gp");  if (myreturn != 0) { cout << "Error calling rm -f 0*gp"; }

  // function to load figures data:
  char filename[15];
  temp1 << "static int nfigsloaded; " << endl;
  temp1 << "int load_data_figures(double FIGS[][MAX_FIGS], eqfig figdata[], int nfigs, int jj, double y[], double C[], double AUX[], double x, FILE * myfile) { " << endl;
  temp1 << "\t int j = nfigsloaded; " << endl;
  temp1 << "\t int i; int errorover=0; " << endl;
  // temp1 << "\t int myreturnsyscall = 0;" << endl;
  temp1 << "\t\t  FIGS[0][j] = x; " << endl;
  for (i = 1; i<=nfigs; i++)
	 {
	   if (st[tfigs[i]].eqname <= "") { temp1.close(); myreturn=system("rm -f temp1.c"); error("You cannot plot a constant/parameter: "+ st[tfigs[i]].name); }
      temp1 << "\t\t  if (! finite(" <<  st[tfigs[i]].eqname << ")) { printf(" <<(char)34 << "Overflow error on variable "<<st[tfigs[i]].name<<" \\n" << (char)34 << "); errorover++; } " << endl;
      temp1 << "\t\t  FIGS["<<i<<"][j] = "<< st[tfigs[i]].eqname << ";" << endl;
	   temp1 << "\t\t  if (figdata["<<i<<"].max < FIGS["<<i<<"][j]) { figdata["<<i<<"].max =  FIGS["<<i<<"][j]; } "<< endl;
	   temp1 << "\t\t  if (figdata["<<i<<"].min > FIGS["<<i<<"][j]) { figdata["<<i<<"].min =  FIGS["<<i<<"][j]; } "<< endl;
	   if (NumSim > 0)
	     {
	       sprintf(filename, "%04u.gp",i);
	       ofstream plotlhs(filename);
	       plotlhs.width(3);
	       plotlhs << setiosflags(ios::scientific);
	       //plotlhs << setiosflags(ios::fixed);
	       //plotlhs << setiosflags(ios::showpoint);
	       plotlhs << "plot ";
		    // legend // lhsdata
	       ofstream  lhsdata("lhsdata");
	       lhsdata << lhscounter << endl;
	       ofstream  filelegend ("legend.gp");
//	       filelegend << "set key below  Left title \'\t"; // box 4 \n";
//	       filelegend << "set key right outside Right title \'LHS Matrix " ;
          if (lhscounter <= 1)
			 filelegend << "set key right outside Right title \'";
			 else
	       filelegend << "set nokey" << endl;
	       for (int uptoNUMSIM = 0; uptoNUMSIM<NumSim; uptoNUMSIM++)
						 {
						 sprintf(filename, "%04u",uptoNUMSIM+1);
						 plotlhs << "'" <<filename << "' u 1:" << i+1 << " t '" << uptoNUMSIM+1 << "\t";
						  plotlhs << setiosflags(ios::scientific);
						  //plotlhs << setiosflags(ios::fixed);
						  //plotlhs << setiosflags(ios::showpoint);
						 if (lhscounter>=1)
						 for (int xlhs = 1; xlhs <= lhscounter; xlhs++)
							{
							  if (lhscounter <=1 ) {
							     plotlhs <<  LHSMatrix[xlhs][uptoNUMSIM] << "\t";
                                 // cout <<  xlhs << " --- "<< LHSMatrix[xlhs][uptoNUMSIM] << "\t";
							      }
							  if (uptoNUMSIM == 0)
								 {
								 if (lhscounter <=1)
							          filelegend << st[LHSDecl[xlhs]].name << "\'" << endl;
					lhsdata << st[LHSDecl[xlhs]].name  << "\t" <<  st[LHSDecl[xlhs]].begin_range << "\t" ;
                    lhsdata << st[LHSDecl[xlhs]].mid_range << " \t" << st[LHSDecl[xlhs]].end_range << "\t" << st[LHSDecl[xlhs]].type_range << endl;
                    			 }
							}
						 plotlhs << resetiosflags(ios::scientific);
						 //plotlhs << resetiosflags(ios::fixed);
						 //plotlhs << resetiosflags(ios::showpoint);
						 plotlhs << "' w p ";
						 if (uptoNUMSIM < (NumSim-1)) plotlhs << ", ";
						 }
	       plotlhs << endl;
	       plotlhs.close();
//	       filelegend << "\' box 4 \n " << endl;
	       filelegend.close();
	       lhsdata.close();

	     }
	 }
  temp1 << "\t nfigsloaded ++;" << endl;
  temp1 << "\t if (nfigsloaded >= MAX_FIGS ) { int xx, yy; " << endl;
  temp1 << "\t\t for (xx=0;xx<MAX_FIGS;xx++) { " << endl;
  temp1 << "\t\t fprintf(myfile," << (char)34 << "%f\\t"<< (char)34 << ",FIGS[0][xx]); " << endl;
  temp1 << "\t\t  for (yy=1;yy<=" <<nfigs <<";yy++) " << endl;
  temp1 << "\t\t\t  fprintf(myfile, " << (char)34 << "%.6e\\t" << (char)34 << ",FIGS[yy][xx]); " << endl;
  temp1 << "\t\t fprintf(myfile,"<<(char)34<<"\\"<< "n" << (char)34 << "); " << endl;
  temp1 << "} nfigsloaded =0; } " << endl;
  temp1 << " return errorover; " << endl;
  temp1 << "} " << endl << endl << endl;
  if (NumSim <= 0) NumSim =1;
  // End of code for lhs evaluation
  temp1 << "int main (void) " << endl;
  temp1 << "{ " << endl;
  temp1 << "\t time_t init_time=time(NULL), end_time; double mydifftime;" << endl;
  // temp1 << "\t int borra = gettimeofday(init_time); " << endl;
  // from here functions
  if (mymethod == RungeKutta4th)
	 {
  temp1 << "\t int i,j, resode=0;  int myc=0; " << endl;
  temp1 << "\t double h, x=1.0, *y, *dydx, *yout, *C, *AUX; " << endl;
  temp1 << "\t FILE *stream; " << endl;
  temp1 << "\t char filename[5]; " <<endl;
  temp1 << "\t int nfigs = " << nfigs << ";" <<endl;
  temp1 << "\t eqfig figdata["<<nfigs+2<<"];" << endl;
  int nrowsfigs= (int)((xtot-xfromt)/xtimefigs);
  nrowsfigs = (int)(nrowsfigs*1.2);
  temp1 << "\t double FIGS[" <<  nfigs+2 << "][MAX_FIGS]; " << endl;
  temp1 << "\t int maxloop =0, nloop =0; int figres=0; " << endl;
  temp1 << "\t y    =  dvector(1,N);  " << endl;
  temp1 << "\t dydx =  dvector(1,N); " << endl;
  temp1 << "\t yout =  dvector(1,N);  " << endl;
  temp1 << "\t C   =   dvector(1,NINC); " << endl;
  temp1 << "\t AUX =   dvector(1,N); " <<endl;
  temp1 << "\t nfigsloaded = 0; " << endl;
  temp1 << "\t for(i=1;i<=nfigs;i++) { figdata[i].max = -HUGE_VAL; figdata[i].min=HUGE_VAL; }; " << endl;
  for (i=1; i<=nfigs; i++)
	 temp1 << "\t  strcpy(figdata[" << i << "].name," << (char)34 << st[tfigs[i]].name << (char)34 << ");" << endl;

  ////
  temp1 << "\t while (myc < " <<  NumSim << ") { " << endl;
  temp1 << "\t load_constants(C); " << endl;
  temp1 << "\t update_variables_lhs(myc, C); " << endl;
  temp1 << "\t load_auxlevel(AUX,y,C); " << endl;
   temp1 << "\t nfigsloaded = 0; " << endl;
  temp1 << "\t /* ---rk4--- */ " << endl;
  temp1 << "\t h = (double)" << xtimestep<< ";"  << endl;
  temp1 << "\t x = (double)" << xfromt << "; " << endl;
  temp1 << "\t maxloop = (int) (" << xtot << "/h)+1;" << endl;
  temp1 << "\t nloop = " << xfromt << "; " << endl;
  temp1 << "\t j=0; "<< endl;
  temp1 << "\t printf(" << (char)34 << "Solving run %d " << "\\" << "n" << (char)34 << ", myc+1);" << endl;
  temp1 << "\t sprintf(filename, " << (char)34 << "%04u" << (char)34 << ", myc+1); " << endl;
  temp1 << "\t stream = fopen(filename," <<   char(34) << "w" <<  char(34) << "  ); " << endl;

//  temp1 << "\t figres=load_data_figures(FIGS, figdata, nfigs, j, y, C, AUX, x, stream);" << endl;
//  temp1 << "\t j++; " << endl;
  // here maxloop = (int)(xtot/xtimesep)+1
  temp1 << "\t while(nloop <= maxloop) {" << endl;
//
  temp1 << "\t\t if (nloop % (int)ceil("<<xtimefigs << "/h) == 0) {" << endl;
  temp1 << "\t\t resode=load_data_figures(FIGS, figdata, nfigs, j, y, C, AUX, x,  stream);" << endl;
  temp1 << "\t\t if (resode > 0) break; " << endl;
  temp1 << "\t\t\t j++; }  " << endl;
//
  temp1 << "\t\t derivs(x,y,dydx,C, AUX); " << endl;
  temp1 << "\t\t rk4(y,dydx,N,x,h,yout,derivs, C, AUX); " <<endl;
  temp1 << "\t\t for(i=0; i<N; i++) " << endl;
  temp1 << "\t\t y[i] = yout[i]; " << endl;

  //

 //
  temp1 << "\t\t nloop++; " << endl;
  temp1 << "\t\t x = x + h;" << endl;
   temp1 << "\t }  " << endl;
  temp1 << "\tfor(i=0; i<nfigsloaded; i++) { " << endl;
  temp1 << "\t\t fprintf(stream,"<< (char)34 <<"%f\\t"<< (char)34 << ",FIGS[0][i]);" << endl;
  temp1 << "\t\t for(j=1; j<=nfigs; j++) fprintf(stream," << (char)34 << "%.5e\\t" << (char)34 << ",FIGS[j][i]); " << endl;
  temp1 << "\t\t fprintf(stream,"<<(char)34<<"\\"<< "n" << (char)34 << "); }; " << endl;
  temp1 << "\t\t fclose(stream); " << endl;
 // temp1 << " } " << endl;
  temp1 << "\t if (resode > 0) { printf( " << (char)34 << "Error solving run %d "<< "\\" << "n" << (char)34 << ", myc+1); break;	} " << endl;
  temp1 << "\t myc++; } " << endl;
  temp1 << "\t WritePlotScript(1, nfigs, " <<nrowsfigs<<", figdata, 0, myc-1);" << endl;
  temp1 << "\t myreturnsyscall = system(" << char(34) << "rm output1.pdf; gnuplot plot.scr &" << char(34) << "); " << endl;
  temp1 << "\t free_dvector(yout,1,N); " << endl;
  temp1 << "\t free_dvector(dydx,1,N); " << endl;
  temp1 << "\t free_dvector(y,1,N); " << endl;
  temp1 << "\t free_dvector(C,1,NINC); " << endl;
  temp1 << "\t free_dvector(AUX,1,N); " << endl;
//  temp1 << "\t free_dmatrix(FIGS, 0," <<  nrowsfigs+1 << ", 0, MAX_FIGS);" << endl;
	 }
  else
	 {
		if ((mymethod == CashKarpRungeKutta) || (mymethod == BSStepPoly) || (mymethod == BSStepRational) ||
			 (mymethod == StiffRosenbrock ) || (mymethod == StiffBSStep))
	 {
		temp1 << "\t int i,j,nbad,nok, resode; int myc=0; " << endl;
		temp1 << "\t double eps=1.0e-8,h1="<<xtimestep<<",hmin=0.0,x1=" << xfromt << "; " << endl;
		temp1 << "\t double x2=" << xtot <<" ,*y, *C, *AUX; " << endl;
		temp1 << "\t FILE *stream; " << endl;
		temp1 << "\t char filename[5]; " << endl;
		temp1 << "\t int nfigs = " << nfigs << ";" <<endl;
		int nrowsfigs= (int)((xtot-xfromt)/xtimestep);
		nrowsfigs = (int)(nrowsfigs*1.2);
		temp1 << "\t double FIGS["<< nfigs+2 << "][MAX_FIGS]; " << endl;
		temp1 << "\t eqfig figdata["<<nfigs+2<<"];" << endl;
		temp1 << "\t int NPOINTS = " << nrowsfigs << "; " << endl;
		temp1 << "\t y=  dvector(1,N); " << endl;
		temp1 << "\t xp= dvector(1,NPOINTS); " << endl;
		temp1 << "\t C = dvector(1,NINC);  " << endl;
		temp1 << "\t AUX=dvector(1,N);  " << endl;
		temp1 << "\t py=dmatrix(1,N,1,NPOINTS);   " << endl;

		temp1 << "\t for(i=1;i<=nfigs;i++) { figdata[i].max = -HUGE_VAL; figdata[i].min=HUGE_VAL; }; " << endl;
		for (i=1;i<=nfigs; i++)
		  temp1 << "\t  strcpy(figdata[" << i << "].name," << (char)34 << st[tfigs[i]].name << (char)34 << ");" << endl;
		temp1 << "\t while (myc < " <<  NumSim << ") { " << endl;
		temp1 << "\t eps=1.0e-8; h1="<<xtimestep<<"; hmin=0.0; x1=" << xfromt << "; " << endl;
		temp1 << "\t x2=" << xtot << ";" << endl;
		temp1 << "\t load_constants(C); " << endl;
		temp1 << "\t update_variables_lhs(myc, C); " << endl;
		temp1 << "\t load_auxlevel(AUX,y,C); " << endl;
		temp1 << "\t nfigsloaded = 0; " << endl;
                temp1 << "\t nrhs=0.0;  " << endl;
		temp1 << "\t kmax=NPOINTS-2;  " << endl;
		temp1 << "\t dxsav="<<xtimestep<<"; " << endl;
		temp1 << "\t\t printf(" << (char)34 << "Solving run %d " << "\\" << "n" << (char)34 << ", myc+1);" << endl;
		temp1 << "\t\t  sprintf(filename, " << (char)34 << "%04u" << (char)34 << ", myc+1); " << endl;
		temp1 << "\t\t stream = fopen(filename," <<   char(34) << "w" <<  char(34) << "  ); " << endl;
	 }
  if (mymethod == CashKarpRungeKutta)
	  temp1 << "\t resode=odeint(y,N,x1,x2,eps,h1,hmin,&nok,&nbad,derivs, rkqs, C, AUX, FIGS, figdata, nfigs, stream); " << endl;
  if (mymethod ==  BSStepPoly)
	   temp1 << "\t resode=odeint(y,N,x1,x2,eps,h1,hmin,&nok,&nbad,derivs,bsstep, C, AUX, FIGS, figdata, nfigs, stream); " << endl;
  if (mymethod ==  BSStepRational)  // seems not a good method
	   temp1 << "\t resode=odeint(y,N,x1,x2,eps,h1,hmin,&nok,&nbad,derivs,bsstep_rz, C, AUX, FIGS, figdata, nfigs, stream); " << endl;
  if (mymethod == StiffRosenbrock)
      temp1 << "\t resode=odeint(y,N,x1,x2,eps,h1,hmin,&nok,&nbad,derivs,stiff, C, AUX, FIGS, figdata, nfigs, stream); " << endl;
  if (mymethod == StiffBSStep)
	 temp1 << "\t resode=  odeint(y,N,x1,x2,eps,h1,hmin,&nok,&nbad,derivs,stifbs, C, AUX, FIGS, figdata, nfigs, stream); " << endl;
  if ((mymethod == CashKarpRungeKutta) || (mymethod == BSStepPoly)  || (mymethod == BSStepRational) || (mymethod==StiffRosenbrock) || (mymethod == StiffBSStep))
	 {

	   temp1 << "\t\t for(i=0; i<nfigsloaded; i++) { " << endl;
	   temp1 << "\t\t fprintf(stream,"<< (char)34 <<"%f\\t"<< (char)34 << ",FIGS[0][i]);" << endl;
	   temp1 << "\t\t for(j=1; j<=nfigs; j++) fprintf(stream," << (char)34 << "%.5e\\t" << (char)34 << ",FIGS[j][i]); " << endl;
	   temp1 << "\t\t fprintf(stream,"<<(char)34<<"\\"<< "n" << (char)34 << "); }; " << endl;

    temp1 << "\t\t fclose(stream); " << endl;

//    temp1 << "} " << endl;
    temp1 << "\t if (resode > 0) { printf( " << (char)34 << "Error solving run %d "<< "\\" << "n" << (char)34 << ", myc+1);	 break; } " << endl;
    temp1 << "\t myc++; } " << endl;
    temp1 << "\t  WritePlotScript1(1, "<<nfigs<<", kount, figdata, 0, myc-1); " << endl;
    temp1 << "\t myreturnsyscall = system(" << char(34) << "rm output1.pdf; gnuplot plot.scr &" << char(34) << "); " << endl;

//    temp1 << "\t if (myreturnsyscall != 0) { printf ( " << (char)34 << " Error in calling rm output1.ps gnuplot plot.scr" << (char)34 <<   ); << endl;

    temp1 << "\t free_dmatrix(py,1,N,1,NPOINTS);  " << endl;
    temp1 << "\t free_dvector(xp,1,NPOINTS); " << endl;
    temp1 << "\t free_dvector(y,1,N); " << endl;
    temp1 << "\t free_dvector(C,1,NINC); " << endl;
    temp1 << "\t free_dvector(AUX,1,N); " << endl;
  //  temp1 << "\t free_dmatrix(FIGS,0,MPOINTS,0,MAX_FIGS);" << endl;
  };
	 }
  temp1 << "\t end_time = time(NULL); " << endl;
  temp1 << "\t mydifftime = difftime(end_time, init_time); " << endl;
//  temp1 << "\t printf(" << (char)34 << "\\" << "n" << (char)34 << ");" << endl;
  temp1 << "\t printf("<<(char)34 <<"##  %f seconds \\" << "n" << (char)34 << ",mydifftime); " << endl;
  temp1 << "\t return 0; " << endl;
  temp1 << "} " << endl;
  temp1.close();
//  cout << "Compiling .. " << endl;
  return 0;
}



