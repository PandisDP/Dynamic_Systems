/*  Program generated by teval1, a translator and LHS/PRCC evaluator written by Jose L. Segovia,  2002-03, for the Kirschner Lab.  */ 
#include <stdio.h> 
#include <stdlib.h> 
#include <math.h>  
#include <time.h>  
#include <string.h> 
#include "datatype.h"
#define NRANSI 
#include "my_nr.h"
#include "nrutil.h"
double dxsav,*xp,**py;  /* defining declarations */ 
int kmax,kount; 
int nrhs;   /* counts function evaluations */ 
#define NINC 122
#define N 150000
#define NFigs 21

void derivs(double TimeAct, double y[], double dydx[], double C[], double AUX[]) 
{
	nrhs++; 
	AUX[1]=  C[94]*(((1.0/C[86])-1.0)/(C[86]+1.0));  		 /* f1=r4g*(((1.0/p1)-1.0)/(p1+1.0)); */
	AUX[2]=  (1.0/C[94])*(((1.0/C[87])-1.0)/(C[87]+1.0));  		 /* f2=(1.0/r4g)*(((1.0/p2)-1.0)/(p2+1.0)); */
	AUX[3]=  C[94]*(((1.0/C[88])-1.0)/(C[88]+1.0));  		 /* f3=r4g*(((1.0/p3)-1.0)/(p3+1.0)); */
	AUX[4]=  C[96]*(((1.0/C[89])-1.0)/(C[89]+1.0));  		 /* f4=r1012*(((1.0/p4)-1.0)/(p4+1.0)); */
	AUX[5]=  (1.0/C[95])*(((1.0/C[90])-1.0)/(C[90]+1.0));  		 /* f5=(1.0/r10g)*(((1.0/p5)-1.0)/(p5+1.0)); */
	AUX[6]=  C[95]*(((1.0/C[91])-1.0)/(C[91]+1.0));  		 /* f6=r10g*(((1.0/p6)-1.0)/(p6+1.0)); */
	AUX[7]=  C[20]*(y[62]+C[98]*y[61]);  		 /* t8recruit=alpha3a*(MA+w*MI); */
	AUX[8]=  C[76]*y[59];  		 /* t8death=mut8*T8; */
	AUX[9]=  y[69]+C[98]*y[68];  		 /* x14=BE+w*BI; */
	AUX[10]=  y[62]/(y[62]+C[56]);  		 /* x23=MA/(MA+c15); */
	AUX[11]=  y[62]/(y[62]+C[54]);  		 /* x24a=MA/(MA+c5a); */
	AUX[12]=  C[19]*(y[62]+C[98]*y[61])*AUX[46];  		 /* x1=alpha3*(MA+w*MI)*tbint0; */
	AUX[13]=  C[19]*(y[62]+C[98]*y[61])*(1-AUX[46]);  		 /* x2=alpha3*(MA+w*MI)*(1-tbint0); */
	AUX[14]=  C[63]*y[60]*(y[63]/(y[63]+AUX[3]*y[65]+C[104]))*((AUX[9]+y[67])/(AUX[9]+y[67]+C[46]));  		 /* x3=k3*MR*(IG/(IG+f3*I4+sc3))*((x14+FA)/(x14+FA+c8)); */
	AUX[15]=  ((y[61]==0)?0.0:((y[57]+y[59])/(y[61])));  		 /* x4=((MI==0)?0.0:((T1+T8)/(MI))); */
	AUX[16]=  ((y[61]==0)?0.0:(y[59]/y[61]));  		 /* x4a=((MI==0)?0.0:(T8/MI)); */
	AUX[17]=  C[64]*y[62]*(y[66]/(y[66]+C[99]));  		 /* x5=k4*MA*(I10/(I10+s8)); */
	AUX[18]=  C[65]*(y[63]/(y[63]+AUX[1]*y[65]+C[102]))*y[64]*y[56];  		 /* x6=k6*(IG/(IG+f1*I4+sc1))*I12*T0; */
	AUX[19]=  C[66]*(y[65]/(y[65]+AUX[2]*y[63]+C[103]))*y[56];  		 /* x7=k7*(I4/(I4+f2*IG+sc2))*T0; */
	AUX[20]=  C[70]*y[61]*exp(AUX[39]*log(y[68]))/(exp(AUX[39]*log(y[68]))+exp(AUX[39]*log(C[93]*y[61]))+C[118]);  		 /* x8=k17*MI*exp(Pw*log(BI))/(exp(Pw*log(BI))+exp(Pw*log(N*MI))+TINY); */
	AUX[21]=  C[71]*y[60]*y[69];  		 /* x10=k18*MR*BE; */
	AUX[22]=  C[67]*y[61]*(AUX[15]/(AUX[15]+C[100]));  		 /* x12=k14a*MI*(x4/(x4+c4)); */
	AUX[23]=  C[72]*y[61]*(AUX[16]/(AUX[16]+C[61]));  		 /* x12a=k52*MI*(x4a/(x4a+c52)); */
	AUX[24]=  C[62]*y[60]*(y[69]/(y[69]+C[47]));  		 /* x13=k2*MR*(BE/(BE+c9)); */
	AUX[25]=  exp(AUX[39]*log(y[68]))/(exp(AUX[39]*log(y[68]))+exp(AUX[39]*log(C[93]*y[61]))+C[118]);  		 /* x15=exp(Pw*log(BI))/(exp(Pw*log(BI))+exp(Pw*log(N*MI))+TINY); */
	AUX[26]=  C[35]*y[68]*(1.0-AUX[25]);  		 /* x16=alpha19*BI*(1.0-x15); */
	AUX[27]=  0.5*C[93]*AUX[24];  		 /* x11=0.5*N*x13; */
	AUX[28]=  C[18]*(AUX[10])*y[56];  		 /* x9=alpha2*(x23)*T0; */
	AUX[29]=  C[23]*y[59]*(AUX[9]/(AUX[9]+C[48]))*(y[64]/(y[64]+C[105]));  		 /* x17=alpha5b*T8*(x14/(x14+c10))*(I12/(I12+sc4)); */
	AUX[30]=  C[37]*(y[60]*0.5+0.5*300)*(AUX[9]/(AUX[9]+C[59]));  		 /* x18=alpha21*(MR*0.5+0.5*300)*(x14/(x14+c28)); */
	AUX[31]=  (C[107]/(y[66]+AUX[6]*y[63]+C[107]))*(C[31]*y[62]);  		 /* x19=(sc6/(I10+f6*IG+sc6))*(alpha14*MA); */
	AUX[32]=  C[24]*(y[64]/(y[64]+AUX[4]*y[66]+C[105]))*y[56]*AUX[11];  		 /* x20=alpha7*(I12/(I12+f4*I10+sc4))*T0*x24a; */
	AUX[33]=  C[73]*y[56];  		 /* x21=mut0*T0; */
	AUX[34]=  (C[104]/(y[63]+AUX[3]*y[65]+C[104]))*(C[46]/(AUX[9]+C[46]));  		 /* x30=(sc3/(IG+f3*I4+sc3))*(c8/(x14+c8)); */
	AUX[35]=  y[63]+AUX[9];  		 /* x50=IG+x14; */
	AUX[36]=  AUX[1]*y[65]+C[119]*y[66];  		 /* x51=f1*I4+f7*I10; */
	AUX[37]=  C[68]*y[61]*AUX[38];  		 /* x52=k14b*MI*x53; */
	AUX[38]=  y[67]/(y[67]+C[120]*y[66]+C[101]);  		 /* x53=FA/(FA+f8*I10+c14a); */
	AUX[39]=  2.0;  		 /* Pw=2.0; */
	AUX[40]=  y[63]/(y[63]+AUX[1]*y[65]+C[102]);  		 /* int1=IG/(IG+f1*I4+sc1); */
	AUX[41]=  y[65]/(y[65]+AUX[2]*y[63]+C[103]);  		 /* int2=I4/(I4+f2*IG+sc2); */
	AUX[42]=  y[63]/(y[63]+AUX[3]*y[65]+C[104]);  		 /* int3=IG/(IG+f3*I4+sc3); */
	AUX[43]=  y[64]/(y[64]+AUX[4]*y[66]+C[105]);  		 /* int4=I12/(I12+f4*I10+sc4); */
	AUX[44]=  y[63]/(y[63]+AUX[5]*y[66]+C[106]);  		 /* int5=IG/(IG+f5*I10+sc5); */
	AUX[45]=  C[107]/(y[66]+AUX[6]*y[63]+C[107]);  		 /* int6=sc6/(I10+f6*IG+sc6); */
	AUX[46]=  y[68]/(y[68]+C[44]);  		 /* tbint0=BI/(BI+c0); */
	AUX[47]=  AUX[9]/(AUX[9]+C[46]);  		 /* tbint1=x14/(x14+c8); */
	AUX[48]=  y[68]/(y[68]+C[93]*y[61]+C[118]);  		 /* pint=BI/(BI+N*MI+TINY); */
	AUX[49]=  1.0/(y[68]+C[93]*y[61]+C[118]);  		 /* pintinv=1.0/(BI+N*MI+TINY); */
	AUX[50]=  AUX[15]/(AUX[15]+C[100]);  		 /* cint=x4/(x4+c4); */
	AUX[51]=  y[68]+y[69];  		 /* TB=BI+BE; */
	AUX[52]=  y[56]+y[57]+y[58]+y[59];  		 /* T=T0+T1+T2+T8; */
	AUX[53]=  y[61]+y[60]+y[62];  		 /* M=MI+MR+MA; */
	AUX[54]=  y[61]/(y[61]+y[62]+y[60]);  		 /* MIp=MI/(MI+MA+MR); */
	AUX[55]=  y[68]/(y[61]+C[118]);  		 /* MITIratio=BI/(MI+TINY); */
	dydx[56]=  C[17]*(y[62]+C[98]*y[61])+AUX[28]-AUX[33]-AUX[18]-AUX[19];  		 /* T0=alpha1*(MA+w*MI)+x9-x21-x6-x7; */
	dydx[57]=  AUX[12]+AUX[18]-C[74]*y[57];  		 /* T1=x1+x6-mut1*T1; */
	dydx[58]=  AUX[13]+AUX[19]-C[75]*y[58];  		 /* T2=x2+x7-mut2*T2; */
	dydx[59]=  AUX[7]-AUX[8];  		 /* T8=t8recruit-t8death; */
	dydx[60]=  C[97]+C[21]*(y[62]+C[98]*y[61])+AUX[30]+AUX[17]-AUX[24]-AUX[14]-C[77]*y[60];  		 /* MR=sr+alpha4*(MA+w*MI)+x18+x5-x13-x3-mur*MR; */
	dydx[61]=  AUX[24]-AUX[22]-(AUX[23])-AUX[20]-AUX[37]-C[77]*y[61];  		 /* MI=x13-x12-(x12a)-x8-x52-mur*MI; */
	dydx[62]=  AUX[14]-AUX[17]-C[77]*y[62];  		 /* MA=x3-x5-mur*MA; */
	dydx[63]=  ((TimeAct<(500.0))?1.0:1.0)*(AUX[29]+C[22]*y[57]*(AUX[11]))-C[80]*y[63];  		 /* IG=((TimeAct<(500.0))?1.0:1.0)*(x17+alpha5a*T1*(x24a))-muig*IG; */
	dydx[64]=  ((TimeAct<(500.0))?1.0:1.0)*(C[25]*y[62]+C[38]*y[61]*(y[63]/(y[63]+C[119]*y[66]+C[57]))+C[39]*y[60]*(AUX[9]/(AUX[9]+C[58])))-C[81]*y[64];  		 /* I12=((TimeAct<(500.0))?1.0:1.0)*(alpha8*MA+alpha22*MI*(IG/(IG+f7*I10+c22))+alpha23*MR*(x14/(x14+c23)))-mui12*I12; */
	dydx[65]=  ((TimeAct<(500.0))?1.0:1.0)*(C[27]*y[56]+C[28]*y[58]+C[29]*y[59])-C[82]*y[65];  		 /* I4=((TimeAct<(500.0))?1.0:1.0)*(alpha11*T0+alpha12*T2+alpha12a*T8)-mui4*I4; */
	dydx[66]=  ((TimeAct<(500.0))?1.0:1.0)*(AUX[31]+C[32]*y[57]+C[33]*y[58]+C[34]*(y[64]/(y[64]+C[52]))*y[56])-C[83]*y[66];  		 /* I10=((TimeAct<(500.0))?1.0:1.0)*(x19+alpha16*T1+alpha17*T2+alpha18*(I12/(I12+c2))*T0)-mui10*I10; */
	dydx[67]=  ((TimeAct<(1000.0))?1.0:1.0)*(C[40]*y[61]+C[41]*y[62]*(AUX[35]/(AUX[35]+AUX[36]+C[108]))+(C[42]*y[57]+C[43]*y[59])*(AUX[9]/(AUX[9]+C[49])))-C[84]*y[67];  		 /* FA=((TimeAct<(1000.0))?1.0:1.0)*(alpha30*MI+alpha31*MA*(x50/(x50+x51+s10))+(alpha32*T1+alpha33*T8)*(x14/(x14+c10a)))-mufa*FA; */
	dydx[68]=  AUX[26]+AUX[27]-AUX[22]*C[93]-AUX[20]*C[93]-C[79]*y[68]-C[93]*(AUX[22])-C[93]*(AUX[23])-AUX[37]*C[93];  		 /* BI=x16+x11-x12*N-x8*N-mui*BI-N*(x12)-N*(x12a)-x52*N; */
	dydx[69]=  AUX[20]*C[93]+C[36]*y[69]-AUX[27]-C[69]*(y[62]*y[69])-AUX[21]+C[111]*AUX[37]+C[79]*y[68]+C[110]*(AUX[22]);  		 /* BE=x8*N+alpha20*BE-x11-k15*(MA*BE)-x10+N2*x52+mui*BI+N1*(x12); */
}
void load_constants(double C[]) {  
	 /* Filling initial conditions */ 
	 C[1] =  0.05 ; 		 /* T0=0.05 0.0 0.04 0.06 $U ; */
	 C[2] =  0.0 ; 		 /* T1=0.0 0.0 0.0 1 $C ; */
	 C[3] =  0.0 ; 		 /* T2=0.0 0.0 0.0 0.0 $U ; */
	 C[4] =  0.0 ; 		 /* T8=0.0 0.0 0.0 0.0 $U ; */
	 C[5] =  300.0 ; 		 /* MR=300.0 0.0 300.0 400.0 $T ; */
	 C[6] =  0.0 ; 		 /* MI=0.0 0.0 0.0 0.0 $U ; */
	 C[7] =  0.0 ; 		 /* MA=0.0 0.0 0.0 0.0 $U ; */
	 C[8] =  0.0 ; 		 /* IG=0.0 0.0 0.0 0.0 $T ; */
	 C[9] =  0.0 ; 		 /* I12=0.0 0.0 0.0 0.0 $L ; */
	 C[10] =  0.0 ; 		 /* I4=0.0 0.0 0.0 0.0 $U ; */
	 C[11] =  0.0 ; 		 /* I10=0.0 0.0 0.0 0.0 $U ; */
	 C[12] =  0.0 ; 		 /* BI=0.0 0.0 0.0 0.0 $U ; */
	 C[13] =  0.5 ; 		 /* BE=0.5 0.0 0.0 0.0 $U ; */
	 C[14] =  0.0 ; 		 /* FA=0.0 ; */
	 C[15] =  0.0 ; 		 /* Rand0=0.0 0.0 0.0 0.0 $U ; */
	 C[16] =  0.1 ; 		 /* ab_23_2=0.1 ; */
	 C[17] =  0.03 ; 		 /* alpha1=0.03 0.001 0.002 0.03 $T ; */
	 C[18] =  1.2 ; 		 /* alpha2=1.2 0.001 1.2 1.2 $U ; */
	 C[19] =  0.03 ; 		 /* alpha3=0.03 0.001 0.03 0.03 $U ; */
	 C[20] =  0.03 ; 		 /* alpha3a=0.03 0.001 0.03 0.3 $U ; */
	 C[21] =  0.03 ; 		 /* alpha4=0.03 0.001 0.03 0.03 $U ; */
	 C[22] =  0.03 ; 		 /* alpha5a=0.03 0.001 0.03 0.03 $U ; */
	 C[23] =  0.024 ; 		 /* alpha5b=0.024 0.0 0.024 0.024 $U ; */
	 C[24] =  0.063 ; 		 /* alpha7=0.063 0.0 0.063 0.063 $U ; */
	 C[25] =  0.0003 ; 		 /* alpha8=0.0003 0.0 0.0003 0.0003 $U ; */
	 C[26] =  0.0009 ; 		 /* alpha10=0.0009 0.0005 0.0007 0.0009 $C ; */
	 C[27] =  0.000028 ; 		 /* alpha11=0.000028 0.00000001 0.000025 0.000028 $L ; */
	 C[28] =  0.0028 ; 		 /* alpha12=0.0028 0.001 0.0025 0.0028 $U ; */
	 C[29] =  0.002 ; 		 /* alpha12a=0.002 0.0 0.002 0.002 $U ; */
	 C[30] =  0.0125 ; 		 /* alpha13=0.0125 0.0 0.0125 0.0125 $U ; */
	 C[31] =  0.025 ; 		 /* alpha14=0.025 0.0 0.025 0.025 $U ; */
	 C[32] =  0.001 ; 		 /* alpha16=0.001 0.0 0.001 0.001 $U ; */
	 C[33] =  0.001 ; 		 /* alpha17=0.001 0.0 0.001 0.001 $U ; */
	 C[34] =  0.0002 ; 		 /* alpha18=0.0002 0.0 0.0002 0.0002 $U ; */
	 C[35] =  0.47 ; 		 /* alpha19=0.47 0.0 0.47 0.47 $U ; */
	 C[36] =  0.29 ; 		 /* alpha20=0.29 0.0 0.29 0.29 $U ; */
	 C[37] =  0.28 ; 		 /* alpha21=0.28 ; */
	 C[38] =  0.00008 ; 		 /* alpha22=0.00008 ; */
	 C[39] =  0.00008 ; 		 /* alpha23=0.00008 ; */
	 C[40] =  0.005 ; 		 /* alpha30=0.005 ; */
	 C[41] =  0.01 ; 		 /* alpha31=0.01 ; */
	 C[42] =  0.005 ; 		 /* alpha32=0.005 ; */
	 C[43] =  0.005 ; 		 /* alpha33=0.005 ; */
	 C[44] =  10.0 ; 		 /* c0=10.0 ; */
	 C[45] =  10.0 ; 		 /* c7=10.0 ; */
	 C[46] =  50.0 ; 		 /* c8=50.0 ; */
	 C[47] =  500.0 ; 		 /* c9=500.0 ; */
	 C[48] =  5.0 ; 		 /* c10=5.0 ; */
	 C[49] =  5.0 ; 		 /* c10a=5.0 ; */
	 C[50] =  5.0 ; 		 /* c12=5.0 ; */
	 C[51] =  5.0 ; 		 /* c18=5.0 ; */
	 C[52] =  0.05 ; 		 /* c2=0.05 ; */
	 C[53] =  0.1 ; 		 /* c13=0.1 ; */
	 C[54] =  3.0 ; 		 /* c5a=3.0 ; */
	 C[55] =  3.0 ; 		 /* c5b=3.0 ; */
	 C[56] =  300.0 ; 		 /* c15=300.0 ; */
	 C[57] =  2.5 ; 		 /* c22=2.5 ; */
	 C[58] =  5.0 ; 		 /* c23=5.0 ; */
	 C[59] =  1000.0 ; 		 /* c28=1000.0 ; */
	 C[60] =  10.0 ; 		 /* c50=10.0 ; */
	 C[61] =  20.0 ; 		 /* c52=20.0 ; */
	 C[62] =  1.1 ; 		 /* k2=1.1 ; */
	 C[63] =  0.3 ; 		 /* k3=0.3 0 0.2 0.3 $U ; */
	 C[64] =  0.36 ; 		 /* k4=0.36 ; */
	 C[65] =  1.2936 ; 		 /* k6=1.2936 ; */
	 C[66] =  0.15 ; 		 /* k7=0.15 ; */
	 C[67] =  50.0 ; 		 /* k14a=50.0 ; */
	 C[68] =  5.0 ; 		 /* k14b=5.0 ; */
	 C[69] =  0.0594737 ; 		 /* k15=0.0594737 ; */
	 C[70] =  0.11 ; 		 /* k17=0.11 ; */
	 C[71] =  0.0017 ; 		 /* k18=0.0017 0.001 0.0012 0.0040 $U ; */
	 C[72] =  50.0 ; 		 /* k52=50.0 ; */
	 C[73] =  0.3333 ; 		 /* mut0=0.3333 ; */
	 C[74] =  0.3333 ; 		 /* mut1=0.3333 ; */
	 C[75] =  0.3333 ; 		 /* mut2=0.3333 ; */
	 C[76] =  0.3333 ; 		 /* mut8=0.3333 ; */
	 C[77] =  0.011 ; 		 /* mur=0.011 ; */
	 C[78] =  0.3333 ; 		 /* mua=0.3333 ; */
	 C[79] =  0.0005 ; 		 /* mui=0.0005 ; */
	 C[80] =  3.0 ; 		 /* muig=3.0 ; */
	 C[81] =  1.18 ; 		 /* mui12=1.18 ; */
	 C[82] =  2.77 ; 		 /* mui4=2.77 ; */
	 C[83] =  3.6968 ; 		 /* mui10=3.6968 ; */
	 C[84] =  10.0 ; 		 /* mufa=10.0 ; */
	 C[85] =  0.7 ; 		 /* p=0.7 ; */
	 C[86] =  0.5 ; 		 /* p1=0.5 ; */
	 C[87] =  0.5 ; 		 /* p2=0.5 ; */
	 C[88] =  0.5 ; 		 /* p3=0.5 ; */
	 C[89] =  0.5 ; 		 /* p4=0.5 ; */
	 C[90] =  0.6 ; 		 /* p5=0.6 ; */
	 C[91] =  0.5 ; 		 /* p6=0.5 ; */
	 C[92] =  0.5 ; 		 /* p7=0.5 ; */
	 C[93] =  20.0 ; 		 /* N=20.0 ; */
	 C[94] =  20.0 ; 		 /* r4g=20.0 ; */
	 C[95] =  5.0 ; 		 /* r10g=5.0 ; */
	 C[96] =  3.0 ; 		 /* r1012=3.0 ; */
	 C[97] =  3.3 ; 		 /* sr=3.3 ; */
	 C[98] =  0.014 ; 		 /* w=0.014 ; */
	 C[99] =  0.2 ; 		 /* s8=0.2 ; */
	 C[100] =  10.0 ; 		 /* c4=10.0 ; */
	 C[101] =  5.0 ; 		 /* c14a=5.0 ; */
	 C[102] =  0.1 ; 		 /* sc1=0.1 ; */
	 C[103] =  0.02 ; 		 /* sc2=0.02 ; */
	 C[104] =  0.1 ; 		 /* sc3=0.1 ; */
	 C[105] =  0.05 ; 		 /* sc4=0.05 ; */
	 C[106] =  0.1 ; 		 /* sc5=0.1 ; */
	 C[107] =  0.2 ; 		 /* sc6=0.2 ; */
	 C[108] =  0.5 ; 		 /* s10=0.5 ; */
	 C[109] =  2.0 ; 		 /* Pw=2.0 ; */
	 C[110] =  20.0 ; 		 /* N1=20.0 ; */
	 C[111] =  1.0 ; 		 /* N2=1.0 ; */
	 C[112] =  0 ; 		 /* f1=0 ; */
	 C[113] =  0 ; 		 /* f2=0 ; */
	 C[114] =  0 ; 		 /* f3=0 ; */
	 C[115] =  0 ; 		 /* f4=0 ; */
	 C[116] =  0 ; 		 /* f5=0 ; */
	 C[117] =  0 ; 		 /* f6=0 ; */
	 C[118] =  1e-200 ; 		 /* TINY=1e-200 ; */
	 C[119] =  10.0 ; 		 /* f7=10.0 ; */
	 C[120] =  5.0 ; 		 /* f8=5.0 ; */
	 } 
/* End of loading constants */ 
void load_auxlevel(double AUX[], double y[], double C[]) {
	 /* Filling leval and aux variables with initial conditions */ 
	 AUX[1] =  C[112]; 	 /* f1 = */ 
	 AUX[2] =  C[113]; 	 /* f2 = */ 
	 AUX[3] =  C[114]; 	 /* f3 = */ 
	 AUX[4] =  C[115]; 	 /* f4 = */ 
	 AUX[5] =  C[116]; 	 /* f5 = */ 
	 AUX[6] =  C[117]; 	 /* f6 = */ 
	 AUX[7] =  0.0; 	 /* t8recruit = */ 
	 AUX[8] =  0.0; 	 /* t8death = */ 
	 AUX[9] =  0.0; 	 /* x14 = */ 
	 AUX[10] =  0.0; 	 /* x23 = */ 
	 AUX[11] =  0.0; 	 /* x24a = */ 
	 AUX[12] =  0.0; 	 /* x1 = */ 
	 AUX[13] =  0.0; 	 /* x2 = */ 
	 AUX[14] =  0.0; 	 /* x3 = */ 
	 AUX[15] =  0.0; 	 /* x4 = */ 
	 AUX[16] =  0.0; 	 /* x4a = */ 
	 AUX[17] =  0.0; 	 /* x5 = */ 
	 AUX[18] =  0.0; 	 /* x6 = */ 
	 AUX[19] =  0.0; 	 /* x7 = */ 
	 AUX[20] =  0.0; 	 /* x8 = */ 
	 AUX[21] =  0.0; 	 /* x10 = */ 
	 AUX[22] =  0.0; 	 /* x12 = */ 
	 AUX[23] =  0.0; 	 /* x12a = */ 
	 AUX[24] =  0.0; 	 /* x13 = */ 
	 AUX[25] =  0.0; 	 /* x15 = */ 
	 AUX[26] =  0.0; 	 /* x16 = */ 
	 AUX[27] =  0.0; 	 /* x11 = */ 
	 AUX[28] =  0.0; 	 /* x9 = */ 
	 AUX[29] =  0.0; 	 /* x17 = */ 
	 AUX[30] =  0.0; 	 /* x18 = */ 
	 AUX[31] =  0.0; 	 /* x19 = */ 
	 AUX[32] =  0.0; 	 /* x20 = */ 
	 AUX[33] =  0.0; 	 /* x21 = */ 
	 AUX[34] =  0.0; 	 /* x30 = */ 
	 AUX[35] =  0.0; 	 /* x50 = */ 
	 AUX[36] =  0.0; 	 /* x51 = */ 
	 AUX[37] =  0.0; 	 /* x52 = */ 
	 AUX[38] =  0.0; 	 /* x53 = */ 
	 AUX[39] =  C[109]; 	 /* Pw = */ 
	 AUX[40] =  0.0; 	 /* int1 = */ 
	 AUX[41] =  0.0; 	 /* int2 = */ 
	 AUX[42] =  0.0; 	 /* int3 = */ 
	 AUX[43] =  0.0; 	 /* int4 = */ 
	 AUX[44] =  0.0; 	 /* int5 = */ 
	 AUX[45] =  0.0; 	 /* int6 = */ 
	 AUX[46] =  0.0; 	 /* tbint0 = */ 
	 AUX[47] =  0.0; 	 /* tbint1 = */ 
	 AUX[48] =  0.0; 	 /* pint = */ 
	 AUX[49] =  0.0; 	 /* pintinv = */ 
	 AUX[50] =  0.0; 	 /* cint = */ 
	 AUX[51] =  0.0; 	 /* TB = */ 
	 AUX[52] =  0.0; 	 /* T = */ 
	 AUX[53] =  0.0; 	 /* M = */ 
	 AUX[54] =  0.0; 	 /* MIp = */ 
	 AUX[55] =  0.0; 	 /* MITIratio = */ 
	 y[56] =  C[1]; 	 /* T0 = */ 
	 y[57] =  C[2]; 	 /* T1 = */ 
	 y[58] =  C[3]; 	 /* T2 = */ 
	 y[59] =  C[4]; 	 /* T8 = */ 
	 y[60] =  C[5]; 	 /* MR = */ 
	 y[61] =  C[6]; 	 /* MI = */ 
	 y[62] =  C[7]; 	 /* MA = */ 
	 y[63] =  C[8]; 	 /* IG = */ 
	 y[64] =  C[9]; 	 /* I12 = */ 
	 y[65] =  C[10]; 	 /* I4 = */ 
	 y[66] =  C[11]; 	 /* I10 = */ 
	 y[67] =  C[14]; 	 /* FA = */ 
	 y[68] =  C[12]; 	 /* BI = */ 
	 y[69] =  C[13]; 	 /* BE = */ 
} 


void update_variables_lhs(int c, double C[]) { 
	 /* Updates the following variables at point given by c */ 
	 
	 if (c == 0)   { 
 		 C[18] = 0.318735; 
 		 C[19] = 0.013905; 
 		 C[21] = 0.016515; 
 		 C[26] = 0.000613131; 
 		 C[71] = 0.003925; 
	 } 
	 if (c == 1)   { 
 		 C[18] = 0.390675; 
 		 C[19] = 0.019415; 
 		 C[21] = 0.005785; 
 		 C[26] = 0.000625253; 
 		 C[71] = 0.002395; 
	 } 
	 if (c == 2)   { 
 		 C[18] = 0.894255; 
 		 C[19] = 0.024345; 
 		 C[21] = 0.002305; 
 		 C[26] = 0.000681818; 
 		 C[71] = 0.001495; 
	 } 
	 if (c == 3)   { 
 		 C[18] = 0.558535; 
 		 C[19] = 0.016515; 
 		 C[21] = 0.019125; 
 		 C[26] = 0.000794949; 
 		 C[71] = 0.002755; 
	 } 
	 if (c == 4)   { 
 		 C[18] = 0.210825; 
 		 C[19] = 0.017675; 
 		 C[21] = 0.024635; 
 		 C[26] = 0.000516162; 
 		 C[71] = 0.001135; 
	 } 
	 if (c == 5)   { 
 		 C[18] = 0.018985; 
 		 C[19] = 0.014195; 
 		 C[21] = 0.018255; 
 		 C[26] = 0.000617172; 
 		 C[71] = 0.001345; 
	 } 
	 if (c == 6)   { 
 		 C[18] = 0.762365; 
 		 C[19] = 0.003175; 
 		 C[21] = 0.025505; 
 		 C[26] = 0.000508081; 
 		 C[71] = 0.003895; 
	 } 
	 if (c == 7)   { 
 		 C[18] = 1.194; 
 		 C[19] = 0.018545; 
 		 C[21] = 0.001435; 
 		 C[26] = 0.000544444; 
 		 C[71] = 0.001555; 
	 } 
	 if (c == 8)   { 
 		 C[18] = 0.882265; 
 		 C[19] = 0.015065; 
 		 C[21] = 0.028115; 
 		 C[26] = 0.00050404; 
 		 C[71] = 0.003715; 
	 } 
	 if (c == 9)   { 
 		 C[18] = 0.306745; 
 		 C[19] = 0.005495; 
 		 C[21] = 0.023765; 
 		 C[26] = 0.000568687; 
 		 C[71] = 0.002035; 
	 } 
	 if (c == 10)   { 
 		 C[18] = 0.294755; 
 		 C[19] = 0.012745; 
 		 C[21] = 0.021445; 
 		 C[26] = 0.000677778; 
 		 C[71] = 0.001225; 
	 } 
	 if (c == 11)   { 
 		 C[18] = 0.606495; 
 		 C[19] = 0.012165; 
 		 C[21] = 0.007235; 
 		 C[26] = 0.000540404; 
 		 C[71] = 0.003745; 
	 } 
	 if (c == 12)   { 
 		 C[18] = 0.906245; 
 		 C[19] = 0.004915; 
 		 C[21] = 0.002595; 
 		 C[26] = 0.000811111; 
 		 C[71] = 0.002245; 
	 } 
	 if (c == 13)   { 
 		 C[18] = 1.14604; 
 		 C[19] = 0.019995; 
 		 C[21] = 0.016805; 
 		 C[26] = 0.00079899; 
 		 C[71] = 0.001885; 
	 } 
	 if (c == 14)   { 
 		 C[18] = 0.162865; 
 		 C[19] = 0.006655; 
 		 C[21] = 0.011585; 
 		 C[26] = 0.0009; 
 		 C[71] = 0.003085; 
	 } 
	 if (c == 15)   { 
 		 C[18] = 0.486595; 
 		 C[19] = 0.007235; 
 		 C[21] = 0.004915; 
 		 C[26] = 0.000572727; 
 		 C[71] = 0.001975; 
	 } 
	 if (c == 16)   { 
 		 C[18] = 0.582515; 
 		 C[19] = 0.008685; 
 		 C[21] = 0.003175; 
 		 C[26] = 0.000758586; 
 		 C[71] = 0.003025; 
	 } 
	 if (c == 17)   { 
 		 C[18] = 0.354705; 
 		 C[19] = 0.002595; 
 		 C[21] = 0.022315; 
 		 C[26] = 0.000588889; 
 		 C[71] = 0.001585; 
	 } 
	 if (c == 18)   { 
 		 C[18] = 0.030975; 
 		 C[19] = 0.014485; 
 		 C[21] = 0.010715; 
 		 C[26] = 0.000750505; 
 		 C[71] = 0.001015; 
	 } 
	 if (c == 19)   { 
 		 C[18] = 0.366695; 
 		 C[19] = 0.009555; 
 		 C[21] = 0.017675; 
 		 C[26] = 0.000823232; 
 		 C[71] = 0.001945; 
	 } 
	 if (c == 20)   { 
 		 C[18] = 0.426645; 
 		 C[19] = 0.016805; 
 		 C[21] = 0.007525; 
 		 C[26] = 0.00060101; 
 		 C[71] = 0.002485; 
	 } 
	 if (c == 21)   { 
 		 C[18] = 0.450625; 
 		 C[19] = 0.009845; 
 		 C[21] = 0.013615; 
 		 C[26] = 0.000584848; 
 		 C[71] = 0.003985; 
	 } 
	 if (c == 22)   { 
 		 C[18] = 0.858285; 
 		 C[19] = 0.011585; 
 		 C[21] = 0.015935; 
 		 C[26] = 0.000580808; 
 		 C[71] = 0.002125; 
	 } 
	 if (c == 23)   { 
 		 C[18] = 0.234805; 
 		 C[19] = 0.022025; 
 		 C[21] = 0.012455; 
 		 C[26] = 0.000685859; 
 		 C[71] = 0.001855; 
	 } 
	 if (c == 24)   { 
 		 C[18] = 0.114905; 
 		 C[19] = 0.013325; 
 		 C[21] = 0.019415; 
 		 C[26] = 0.000637374; 
 		 C[71] = 0.002005; 
	 } 
	 if (c == 25)   { 
 		 C[18] = 0.174855; 
 		 C[19] = 0.028115; 
 		 C[21] = 0.006945; 
 		 C[26] = 0.000835354; 
 		 C[71] = 0.002785; 
	 } 
	 if (c == 26)   { 
 		 C[18] = 1.01415; 
 		 C[19] = 0.017385; 
 		 C[21] = 0.014485; 
 		 C[26] = 0.000754545; 
 		 C[71] = 0.002275; 
	 } 
	 if (c == 27)   { 
 		 C[18] = 0.822315; 
 		 C[19] = 0.011875; 
 		 C[21] = 0.021735; 
 		 C[26] = 0.000867677; 
 		 C[71] = 0.001375; 
	 } 
	 if (c == 28)   { 
 		 C[18] = 0.126895; 
 		 C[19] = 0.001435; 
 		 C[21] = 0.020575; 
 		 C[26] = 0.000766667; 
 		 C[71] = 0.001285; 
	 } 
	 if (c == 29)   { 
 		 C[18] = 0.282765; 
 		 C[19] = 0.004045; 
 		 C[21] = 0.006075; 
 		 C[26] = 0.00089596; 
 		 C[71] = 0.001045; 
	 } 
	 if (c == 30)   { 
 		 C[18] = 0.402665; 
 		 C[19] = 0.025795; 
 		 C[21] = 0.026085; 
 		 C[26] = 0.000532323; 
 		 C[71] = 0.003115; 
	 } 
	 if (c == 31)   { 
 		 C[18] = 0.726395; 
 		 C[19] = 0.002015; 
 		 C[21] = 0.022895; 
 		 C[26] = 0.00059697; 
 		 C[71] = 0.002695; 
	 } 
	 if (c == 32)   { 
 		 C[18] = 1.12206; 
 		 C[19] = 0.003755; 
 		 C[21] = 0.027535; 
 		 C[26] = 0.000738384; 
 		 C[71] = 0.001165; 
	 } 
	 if (c == 33)   { 
 		 C[18] = 0.870275; 
 		 C[19] = 0.023185; 
 		 C[21] = 0.002885; 
 		 C[26] = 0.000609091; 
 		 C[71] = 0.003235; 
	 } 
	 if (c == 34)   { 
 		 C[18] = 0.810325; 
 		 C[19] = 0.005205; 
 		 C[21] = 0.009265; 
 		 C[26] = 0.000649495; 
 		 C[71] = 0.002875; 
	 } 
	 if (c == 35)   { 
 		 C[18] = 0.546545; 
 		 C[19] = 0.002305; 
 		 C[21] = 0.025795; 
 		 C[26] = 0.000726263; 
 		 C[71] = 0.001405; 
	 } 
	 if (c == 36)   { 
 		 C[18] = 0.006995; 
 		 C[19] = 0.013615; 
 		 C[21] = 0.005495; 
 		 C[26] = 0.000774747; 
 		 C[71] = 0.001915; 
	 } 
	 if (c == 37)   { 
 		 C[18] = 0.738385; 
 		 C[19] = 0.005785; 
 		 C[21] = 0.025215; 
 		 C[26] = 0.00070202; 
 		 C[71] = 0.002965; 
	 } 
	 if (c == 38)   { 
 		 C[18] = 0.090925; 
 		 C[19] = 0.015645; 
 		 C[21] = 0.014775; 
 		 C[26] = 0.000560606; 
 		 C[71] = 0.002905; 
	 } 
	 if (c == 39)   { 
 		 C[18] = 0.654455; 
 		 C[19] = 0.025215; 
 		 C[21] = 0.009555; 
 		 C[26] = 0.000782828; 
 		 C[71] = 0.002725; 
	 } 
	 if (c == 40)   { 
 		 C[18] = 0.378685; 
 		 C[19] = 0.025505; 
 		 C[21] = 0.028985; 
 		 C[26] = 0.000714141; 
 		 C[71] = 0.002575; 
	 } 
	 if (c == 41)   { 
 		 C[18] = 1.13406; 
 		 C[19] = 0.023765; 
 		 C[21] = 0.015645; 
 		 C[26] = 0.000548485; 
 		 C[71] = 0.002935; 
	 } 
	 if (c == 42)   { 
 		 C[18] = 0.342715; 
 		 C[19] = 0.026665; 
 		 C[21] = 0.027245; 
 		 C[26] = 0.000722222; 
 		 C[71] = 0.003475; 
	 } 
	 if (c == 43)   { 
 		 C[18] = 0.954205; 
 		 C[19] = 0.004335; 
 		 C[21] = 0.016225; 
 		 C[26] = 0.000847475; 
 		 C[71] = 0.001255; 
	 } 
	 if (c == 44)   { 
 		 C[18] = 0.774355; 
 		 C[19] = 0.007815; 
 		 C[21] = 0.026375; 
 		 C[26] = 0.000790909; 
 		 C[71] = 0.003265; 
	 } 
	 if (c == 45)   { 
 		 C[18] = 1.05012; 
 		 C[19] = 0.002885; 
 		 C[21] = 0.026665; 
 		 C[26] = 0.000669697; 
 		 C[71] = 0.002545; 
	 } 
	 if (c == 46)   { 
 		 C[18] = 0.198835; 
 		 C[19] = 0.022315; 
 		 C[21] = 0.017385; 
 		 C[26] = 0.000592929; 
 		 C[71] = 0.001615; 
	 } 
	 if (c == 47)   { 
 		 C[18] = 0.846295; 
 		 C[19] = 0.027535; 
 		 C[21] = 0.017095; 
 		 C[26] = 0.000689899; 
 		 C[71] = 0.002305; 
	 } 
	 if (c == 48)   { 
 		 C[18] = 1.03814; 
 		 C[19] = 0.022895; 
 		 C[21] = 0.012745; 
 		 C[26] = 0.000536364; 
 		 C[71] = 0.003595; 
	 } 
	 if (c == 49)   { 
 		 C[18] = 0.930225; 
 		 C[19] = 0.027245; 
 		 C[21] = 0.020865; 
 		 C[26] = 0.000657576; 
 		 C[71] = 0.001795; 
	 } 
	 if (c == 50)   { 
 		 C[18] = 0.498585; 
 		 C[19] = 0.020575; 
 		 C[21] = 0.028405; 
 		 C[26] = 0.000770707; 
 		 C[71] = 0.003565; 
	 } 
	 if (c == 51)   { 
 		 C[18] = 0.078935; 
 		 C[19] = 0.013035; 
 		 C[21] = 0.003755; 
 		 C[26] = 0.000742424; 
 		 C[71] = 0.001765; 
	 } 
	 if (c == 52)   { 
 		 C[18] = 0.714405; 
 		 C[19] = 0.006365; 
 		 C[21] = 0.029275; 
 		 C[26] = 0.000641414; 
 		 C[71] = 0.002845; 
	 } 
	 if (c == 53)   { 
 		 C[18] = 0.834305; 
 		 C[19] = 0.009265; 
 		 C[21] = 0.017965; 
 		 C[26] = 0.000827273; 
 		 C[71] = 0.002095; 
	 } 
	 if (c == 54)   { 
 		 C[18] = 0.258785; 
 		 C[19] = 0.011005; 
 		 C[21] = 0.013035; 
 		 C[26] = 0.000520202; 
 		 C[71] = 0.003535; 
	 } 
	 if (c == 55)   { 
 		 C[18] = 1.09808; 
 		 C[19] = 0.021155; 
 		 C[21] = 0.011295; 
 		 C[26] = 0.000883838; 
 		 C[71] = 0.001675; 
	 } 
	 if (c == 56)   { 
 		 C[18] = 0.990175; 
 		 C[19] = 0.026085; 
 		 C[21] = 0.013325; 
 		 C[26] = 0.000552525; 
 		 C[71] = 0.003355; 
	 } 
	 if (c == 57)   { 
 		 C[18] = 0.150875; 
 		 C[19] = 0.023475; 
 		 C[21] = 0.011005; 
 		 C[26] = 0.000524242; 
 		 C[71] = 0.003415; 
	 } 
	 if (c == 58)   { 
 		 C[18] = 0.474605; 
 		 C[19] = 0.028405; 
 		 C[21] = 0.002015; 
 		 C[26] = 0.000730303; 
 		 C[71] = 0.001525; 
	 } 
	 if (c == 59)   { 
 		 C[18] = 0.786345; 
 		 C[19] = 0.007525; 
 		 C[21] = 0.022025; 
 		 C[26] = 0.000778788; 
 		 C[71] = 0.003175; 
	 } 
	 if (c == 60)   { 
 		 C[18] = 0.798335; 
 		 C[19] = 0.001145; 
 		 C[21] = 0.022605; 
 		 C[26] = 0.000710101; 
 		 C[71] = 0.003505; 
	 } 
	 if (c == 61)   { 
 		 C[18] = 0.534555; 
 		 C[19] = 0.024055; 
 		 C[21] = 0.003465; 
 		 C[26] = 0.000665657; 
 		 C[71] = 0.003325; 
	 } 
	 if (c == 62)   { 
 		 C[18] = 0.702415; 
 		 C[19] = 0.012455; 
 		 C[21] = 0.008105; 
 		 C[26] = 0.00069798; 
 		 C[71] = 0.002365; 
	 } 
	 if (c == 63)   { 
 		 C[18] = 0.522565; 
 		 C[19] = 0.020285; 
 		 C[21] = 0.001145; 
 		 C[26] = 0.0005; 
 		 C[71] = 0.001075; 
	 } 
	 if (c == 64)   { 
 		 C[18] = 1.02614; 
 		 C[19] = 0.011295; 
 		 C[21] = 0.019995; 
 		 C[26] = 0.000855556; 
 		 C[71] = 0.003385; 
	 } 
	 if (c == 65)   { 
 		 C[18] = 0.102915; 
 		 C[19] = 0.016225; 
 		 C[21] = 0.023185; 
 		 C[26] = 0.000887879; 
 		 C[71] = 0.002335; 
	 } 
	 if (c == 66)   { 
 		 C[18] = 1.00216; 
 		 C[19] = 0.018255; 
 		 C[21] = 0.014195; 
 		 C[26] = 0.000762626; 
 		 C[71] = 0.003685; 
	 } 
	 if (c == 67)   { 
 		 C[18] = 1.0861; 
 		 C[19] = 0.021735; 
 		 C[21] = 0.019705; 
 		 C[26] = 0.000843434; 
 		 C[71] = 0.002815; 
	 } 
	 if (c == 68)   { 
 		 C[18] = 0.666445; 
 		 C[19] = 0.029855; 
 		 C[21] = 0.010425; 
 		 C[26] = 0.000645455; 
 		 C[71] = 0.003055; 
	 } 
	 if (c == 69)   { 
 		 C[18] = 0.750375; 
 		 C[19] = 0.024925; 
 		 C[21] = 0.008975; 
 		 C[26] = 0.000879798; 
 		 C[71] = 0.001195; 
	 } 
	 if (c == 70)   { 
 		 C[18] = 1.18202; 
 		 C[19] = 0.017095; 
 		 C[21] = 0.008685; 
 		 C[26] = 0.000839394; 
 		 C[71] = 0.002665; 
	 } 
	 if (c == 71)   { 
 		 C[18] = 0.054955; 
 		 C[19] = 0.008975; 
 		 C[21] = 0.018545; 
 		 C[26] = 0.000851515; 
 		 C[71] = 0.002215; 
	 } 
	 if (c == 72)   { 
 		 C[18] = 0.918235; 
 		 C[19] = 0.015935; 
 		 C[21] = 0.023475; 
 		 C[26] = 0.000819192; 
 		 C[71] = 0.001825; 
	 } 
	 if (c == 73)   { 
 		 C[18] = 0.966195; 
 		 C[19] = 0.022605; 
 		 C[21] = 0.013905; 
 		 C[26] = 0.000621212; 
 		 C[71] = 0.003145; 
	 } 
	 if (c == 74)   { 
 		 C[18] = 0.942215; 
 		 C[19] = 0.026955; 
 		 C[21] = 0.005205; 
 		 C[26] = 0.000556566; 
 		 C[71] = 0.003775; 
	 } 
	 if (c == 75)   { 
 		 C[18] = 1.17002; 
 		 C[19] = 0.010135; 
 		 C[21] = 0.015355; 
 		 C[26] = 0.000831313; 
 		 C[71] = 0.003655; 
	 } 
	 if (c == 76)   { 
 		 C[18] = 0.570525; 
 		 C[19] = 0.026375; 
 		 C[21] = 0.004625; 
 		 C[26] = 0.000863636; 
 		 C[71] = 0.002515; 
	 } 
	 if (c == 77)   { 
 		 C[18] = 0.510575; 
 		 C[19] = 0.014775; 
 		 C[21] = 0.007815; 
 		 C[26] = 0.000871717; 
 		 C[71] = 0.003445; 
	 } 
	 if (c == 78)   { 
 		 C[18] = 0.246795; 
 		 C[19] = 0.006075; 
 		 C[21] = 0.021155; 
 		 C[26] = 0.000746465; 
 		 C[71] = 0.002155; 
	 } 
	 if (c == 79)   { 
 		 C[18] = 1.15803; 
 		 C[19] = 0.006945; 
 		 C[21] = 0.028695; 
 		 C[26] = 0.000661616; 
 		 C[71] = 0.003625; 
	 } 
	 if (c == 80)   { 
 		 C[18] = 0.462615; 
 		 C[19] = 0.015355; 
 		 C[21] = 0.006655; 
 		 C[26] = 0.000859596; 
 		 C[71] = 0.002185; 
	 } 
	 if (c == 81)   { 
 		 C[18] = 0.690425; 
 		 C[19] = 0.019705; 
 		 C[21] = 0.020285; 
 		 C[26] = 0.000633333; 
 		 C[71] = 0.003955; 
	 } 
	 if (c == 82)   { 
 		 C[18] = 0.414655; 
 		 C[19] = 0.029275; 
 		 C[21] = 0.024925; 
 		 C[26] = 0.000673737; 
 		 C[71] = 0.001465; 
	 } 
	 if (c == 83)   { 
 		 C[18] = 1.11007; 
 		 C[19] = 0.021445; 
 		 C[21] = 0.012165; 
 		 C[26] = 0.000564646; 
 		 C[71] = 0.001735; 
	 } 
	 if (c == 84)   { 
 		 C[18] = 0.222815; 
 		 C[19] = 0.008395; 
 		 C[21] = 0.008395; 
 		 C[26] = 0.000815152; 
 		 C[71] = 0.001705; 
	 } 
	 if (c == 85)   { 
 		 C[18] = 0.438635; 
 		 C[19] = 0.010425; 
 		 C[21] = 0.029565; 
 		 C[26] = 0.000807071; 
 		 C[71] = 0.002425; 
	 } 
	 if (c == 86)   { 
 		 C[18] = 0.066945; 
 		 C[19] = 0.027825; 
 		 C[21] = 0.026955; 
 		 C[26] = 0.000576768; 
 		 C[71] = 0.003205; 
	 } 
	 if (c == 87)   { 
 		 C[18] = 1.0741; 
 		 C[19] = 0.028695; 
 		 C[21] = 0.009845; 
 		 C[26] = 0.000706061; 
 		 C[71] = 0.003805; 
	 } 
	 if (c == 88)   { 
 		 C[18] = 1.06211; 
 		 C[19] = 0.029565; 
 		 C[21] = 0.029855; 
 		 C[26] = 0.000891919; 
 		 C[71] = 0.003835; 
	 } 
	 if (c == 89)   { 
 		 C[18] = 0.630475; 
 		 C[19] = 0.017965; 
 		 C[21] = 0.024055; 
 		 C[26] = 0.000605051; 
 		 C[71] = 0.002635; 
	 } 
	 if (c == 90)   { 
 		 C[18] = 0.042965; 
 		 C[19] = 0.008105; 
 		 C[21] = 0.015065; 
 		 C[26] = 0.000693939; 
 		 C[71] = 0.001105; 
	 } 
	 if (c == 91)   { 
 		 C[18] = 0.678435; 
 		 C[19] = 0.003465; 
 		 C[21] = 0.004335; 
 		 C[26] = 0.000786869; 
 		 C[71] = 0.002605; 
	 } 
	 if (c == 92)   { 
 		 C[18] = 0.978185; 
 		 C[19] = 0.010715; 
 		 C[21] = 0.018835; 
 		 C[26] = 0.000528283; 
 		 C[71] = 0.002995; 
	 } 
	 if (c == 93)   { 
 		 C[18] = 0.594505; 
 		 C[19] = 0.001725; 
 		 C[21] = 0.001725; 
 		 C[26] = 0.00080303; 
 		 C[71] = 0.003865; 
	 } 
	 if (c == 94)   { 
 		 C[18] = 0.642465; 
 		 C[19] = 0.018835; 
 		 C[21] = 0.011875; 
 		 C[26] = 0.000734343; 
 		 C[71] = 0.002065; 
	 } 
	 if (c == 95)   { 
 		 C[18] = 0.138885; 
 		 C[19] = 0.019125; 
 		 C[21] = 0.024345; 
 		 C[26] = 0.000653535; 
 		 C[71] = 0.003295; 
	 } 
	 if (c == 96)   { 
 		 C[18] = 0.270775; 
 		 C[19] = 0.004625; 
 		 C[21] = 0.004045; 
 		 C[26] = 0.000875758; 
 		 C[71] = 0.001315; 
	 } 
	 if (c == 97)   { 
 		 C[18] = 0.330725; 
 		 C[19] = 0.020865; 
 		 C[21] = 0.010135; 
 		 C[26] = 0.000629293; 
 		 C[71] = 0.001435; 
	 } 
	 if (c == 98)   { 
 		 C[18] = 0.186845; 
 		 C[19] = 0.024635; 
 		 C[21] = 0.006365; 
 		 C[26] = 0.000718182; 
 		 C[71] = 0.002455; 
	 } 
	 if (c == 99)   { 
 		 C[18] = 0.618485; 
 		 C[19] = 0.028985; 
 		 C[21] = 0.027825; 
 		 C[26] = 0.000512121; 
 		 C[71] = 0.001645; 
	 } 
 } /*  End of update_variables_lhs  */ 


static int nfigsloaded; 
int load_data_figures(double FIGS[][MAX_FIGS], eqfig figdata[], int nfigs, int jj, double y[], double C[], double AUX[], double x, FILE * myfile) { 
	 int j = nfigsloaded; 
	 int i; int errorover=0; 
		  FIGS[0][j] = x; 
		  if (! finite(y[69])) { printf("Overflow error on variable BE \n"); errorover++; } 
		  FIGS[1][j] = y[69];
		  if (figdata[1].max < FIGS[1][j]) { figdata[1].max =  FIGS[1][j]; } 
		  if (figdata[1].min > FIGS[1][j]) { figdata[1].min =  FIGS[1][j]; } 
		  if (! finite(y[56])) { printf("Overflow error on variable T0 \n"); errorover++; } 
		  FIGS[2][j] = y[56];
		  if (figdata[2].max < FIGS[2][j]) { figdata[2].max =  FIGS[2][j]; } 
		  if (figdata[2].min > FIGS[2][j]) { figdata[2].min =  FIGS[2][j]; } 
		  if (! finite(y[57])) { printf("Overflow error on variable T1 \n"); errorover++; } 
		  FIGS[3][j] = y[57];
		  if (figdata[3].max < FIGS[3][j]) { figdata[3].max =  FIGS[3][j]; } 
		  if (figdata[3].min > FIGS[3][j]) { figdata[3].min =  FIGS[3][j]; } 
		  if (! finite(y[58])) { printf("Overflow error on variable T2 \n"); errorover++; } 
		  FIGS[4][j] = y[58];
		  if (figdata[4].max < FIGS[4][j]) { figdata[4].max =  FIGS[4][j]; } 
		  if (figdata[4].min > FIGS[4][j]) { figdata[4].min =  FIGS[4][j]; } 
		  if (! finite(y[59])) { printf("Overflow error on variable T8 \n"); errorover++; } 
		  FIGS[5][j] = y[59];
		  if (figdata[5].max < FIGS[5][j]) { figdata[5].max =  FIGS[5][j]; } 
		  if (figdata[5].min > FIGS[5][j]) { figdata[5].min =  FIGS[5][j]; } 
		  if (! finite(y[60])) { printf("Overflow error on variable MR \n"); errorover++; } 
		  FIGS[6][j] = y[60];
		  if (figdata[6].max < FIGS[6][j]) { figdata[6].max =  FIGS[6][j]; } 
		  if (figdata[6].min > FIGS[6][j]) { figdata[6].min =  FIGS[6][j]; } 
		  if (! finite(y[61])) { printf("Overflow error on variable MI \n"); errorover++; } 
		  FIGS[7][j] = y[61];
		  if (figdata[7].max < FIGS[7][j]) { figdata[7].max =  FIGS[7][j]; } 
		  if (figdata[7].min > FIGS[7][j]) { figdata[7].min =  FIGS[7][j]; } 
		  if (! finite(y[62])) { printf("Overflow error on variable MA \n"); errorover++; } 
		  FIGS[8][j] = y[62];
		  if (figdata[8].max < FIGS[8][j]) { figdata[8].max =  FIGS[8][j]; } 
		  if (figdata[8].min > FIGS[8][j]) { figdata[8].min =  FIGS[8][j]; } 
		  if (! finite(y[63])) { printf("Overflow error on variable IG \n"); errorover++; } 
		  FIGS[9][j] = y[63];
		  if (figdata[9].max < FIGS[9][j]) { figdata[9].max =  FIGS[9][j]; } 
		  if (figdata[9].min > FIGS[9][j]) { figdata[9].min =  FIGS[9][j]; } 
		  if (! finite(y[64])) { printf("Overflow error on variable I12 \n"); errorover++; } 
		  FIGS[10][j] = y[64];
		  if (figdata[10].max < FIGS[10][j]) { figdata[10].max =  FIGS[10][j]; } 
		  if (figdata[10].min > FIGS[10][j]) { figdata[10].min =  FIGS[10][j]; } 
		  if (! finite(y[65])) { printf("Overflow error on variable I4 \n"); errorover++; } 
		  FIGS[11][j] = y[65];
		  if (figdata[11].max < FIGS[11][j]) { figdata[11].max =  FIGS[11][j]; } 
		  if (figdata[11].min > FIGS[11][j]) { figdata[11].min =  FIGS[11][j]; } 
		  if (! finite(y[66])) { printf("Overflow error on variable I10 \n"); errorover++; } 
		  FIGS[12][j] = y[66];
		  if (figdata[12].max < FIGS[12][j]) { figdata[12].max =  FIGS[12][j]; } 
		  if (figdata[12].min > FIGS[12][j]) { figdata[12].min =  FIGS[12][j]; } 
		  if (! finite(y[67])) { printf("Overflow error on variable FA \n"); errorover++; } 
		  FIGS[13][j] = y[67];
		  if (figdata[13].max < FIGS[13][j]) { figdata[13].max =  FIGS[13][j]; } 
		  if (figdata[13].min > FIGS[13][j]) { figdata[13].min =  FIGS[13][j]; } 
		  if (! finite(y[68])) { printf("Overflow error on variable BI \n"); errorover++; } 
		  FIGS[14][j] = y[68];
		  if (figdata[14].max < FIGS[14][j]) { figdata[14].max =  FIGS[14][j]; } 
		  if (figdata[14].min > FIGS[14][j]) { figdata[14].min =  FIGS[14][j]; } 
		  if (! finite(AUX[51])) { printf("Overflow error on variable TB \n"); errorover++; } 
		  FIGS[15][j] = AUX[51];
		  if (figdata[15].max < FIGS[15][j]) { figdata[15].max =  FIGS[15][j]; } 
		  if (figdata[15].min > FIGS[15][j]) { figdata[15].min =  FIGS[15][j]; } 
		  if (! finite(AUX[52])) { printf("Overflow error on variable T \n"); errorover++; } 
		  FIGS[16][j] = AUX[52];
		  if (figdata[16].max < FIGS[16][j]) { figdata[16].max =  FIGS[16][j]; } 
		  if (figdata[16].min > FIGS[16][j]) { figdata[16].min =  FIGS[16][j]; } 
		  if (! finite(AUX[53])) { printf("Overflow error on variable M \n"); errorover++; } 
		  FIGS[17][j] = AUX[53];
		  if (figdata[17].max < FIGS[17][j]) { figdata[17].max =  FIGS[17][j]; } 
		  if (figdata[17].min > FIGS[17][j]) { figdata[17].min =  FIGS[17][j]; } 
		  if (! finite(AUX[54])) { printf("Overflow error on variable MIp \n"); errorover++; } 
		  FIGS[18][j] = AUX[54];
		  if (figdata[18].max < FIGS[18][j]) { figdata[18].max =  FIGS[18][j]; } 
		  if (figdata[18].min > FIGS[18][j]) { figdata[18].min =  FIGS[18][j]; } 
		  if (! finite(AUX[55])) { printf("Overflow error on variable MITIratio \n"); errorover++; } 
		  FIGS[19][j] = AUX[55];
		  if (figdata[19].max < FIGS[19][j]) { figdata[19].max =  FIGS[19][j]; } 
		  if (figdata[19].min > FIGS[19][j]) { figdata[19].min =  FIGS[19][j]; } 
	 nfigsloaded ++;
	 if (nfigsloaded >= MAX_FIGS ) { int xx, yy; 
		 for (xx=0;xx<MAX_FIGS;xx++) { 
		 fprintf(myfile,"%f\t",FIGS[0][xx]); 
		  for (yy=1;yy<=19;yy++) 
			  fprintf(myfile, "%.6e\t",FIGS[yy][xx]); 
		 fprintf(myfile,"\n"); 
} nfigsloaded =0; } 
 return errorover; 
} 


int main (void) 
{ 
	 time_t init_time=time(NULL), end_time; double mydifftime;
	 int i,j, resode=0;  int myc=0; 
	 double h, x=1.0, *y, *dydx, *yout, *C, *AUX; 
	 FILE *stream; 
	 char filename[5]; 
	 int nfigs = 19;
	 eqfig figdata[21];
	 double FIGS[21][MAX_FIGS]; 
	 int maxloop =0, nloop =0; int figres=0; 
	 y    =  dvector(1,N);  
	 dydx =  dvector(1,N); 
	 yout =  dvector(1,N);  
	 C   =   dvector(1,NINC); 
	 AUX =   dvector(1,N); 
	 nfigsloaded = 0; 
	 for(i=1;i<=nfigs;i++) { figdata[i].max = -HUGE; figdata[i].min=HUGE; }; 
	  strcpy(figdata[1].name,"BE");
	  strcpy(figdata[2].name,"T0");
	  strcpy(figdata[3].name,"T1");
	  strcpy(figdata[4].name,"T2");
	  strcpy(figdata[5].name,"T8");
	  strcpy(figdata[6].name,"MR");
	  strcpy(figdata[7].name,"MI");
	  strcpy(figdata[8].name,"MA");
	  strcpy(figdata[9].name,"IG");
	  strcpy(figdata[10].name,"I12");
	  strcpy(figdata[11].name,"I4");
	  strcpy(figdata[12].name,"I10");
	  strcpy(figdata[13].name,"FA");
	  strcpy(figdata[14].name,"BI");
	  strcpy(figdata[15].name,"TB");
	  strcpy(figdata[16].name,"T");
	  strcpy(figdata[17].name,"M");
	  strcpy(figdata[18].name,"MIp");
	  strcpy(figdata[19].name,"MITIratio");
	 while (myc < 100) { 
	 load_constants(C); 
	 update_variables_lhs(myc, C); 
	 load_auxlevel(AUX,y,C); 
	 nfigsloaded = 0; 
	 /* ---rk4--- */ 
	 h = (double)0.01;
	 x = (double)0; 
	 maxloop = (int) (500/h)+1;
	 nloop = 0; 
	 j=0; 
	 printf("Solving run %d \n", myc+1);
	 sprintf(filename, "%04u", myc+1); 
	 stream = fopen(filename,"w"  ); 
	 while(nloop <= maxloop) {
		 if (nloop % (int)ceil(1/h) == 0) {
		 resode=load_data_figures(FIGS, figdata, nfigs, j, y, C, AUX, x,  stream);
		 if (resode > 0) break; 
			 j++; }  
		 derivs(x,y,dydx,C, AUX); 
		 rk4(y,dydx,N,x,h,yout,derivs, C, AUX); 
		 for(i=0; i<N; i++) 
		 y[i] = yout[i]; 
		 nloop++; 
		 x = x + h;
	 }  
	for(i=0; i<nfigsloaded; i++) { 
		 fprintf(stream,"%f\t",FIGS[0][i]);
		 for(j=1; j<=nfigs; j++) fprintf(stream,"%.5e\t",FIGS[j][i]); 
		 fprintf(stream,"\n"); }; 
		 fclose(stream); 
	 if (resode > 0) { printf( "Error solving run %d \n", myc+1); break;	} 
	 myc++; } 
	 WritePlotScript(1, nfigs, 599, figdata, 0, myc-1);
	 system("rm output1.ps; gnuplot plot.scr &"); 
	 free_dvector(yout,1,N); 
	 free_dvector(dydx,1,N); 
	 free_dvector(y,1,N); 
	 free_dvector(C,1,NINC); 
	 free_dvector(AUX,1,N); 
	 end_time = time(NULL); 
	 mydifftime = difftime(end_time, init_time); 
	 printf("##  %f seconds \n",mydifftime); 
	 return 0; 
} 
